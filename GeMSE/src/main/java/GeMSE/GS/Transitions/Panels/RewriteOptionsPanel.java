/** GenoMetric Space Explorer (GeMSE) Copyright (C) 2017 Vahid Jalili
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */
package GeMSE.GS.Transitions.Panels;

import GeMSE.GS.Transitions.Options.DiscretizeOptions;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vahid Jalili
 */
public class RewriteOptionsPanel extends javax.swing.JPanel
{
    ArrayList<double[]> mappings;

    public RewriteOptionsPanel()
    {
        initComponents();
        mappings = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        Rows_Range_L = new javax.swing.JLabel();
        RowsFrom_TB = new javax.swing.JTextField();
        RowsTo_TB = new javax.swing.JTextField();
        Columns_Range_L = new javax.swing.JLabel();
        ColumnsFrom_TB = new javax.swing.JTextField();
        ColumnsTo_TB = new javax.swing.JTextField();
        From_L = new javax.swing.JLabel();
        To_L = new javax.swing.JLabel();
        Mapping_L = new javax.swing.JLabel();
        Operation_Range_L1 = new javax.swing.JLabel();
        Source_Range_L = new javax.swing.JLabel();
        MappingFrom_TB = new javax.swing.JTextField();
        MappingTo_TB = new javax.swing.JTextField();
        Mapping_To_L = new javax.swing.JLabel();
        Mapping_From_L = new javax.swing.JLabel();
        New_Value_L = new javax.swing.JLabel();
        NewValue_TB = new javax.swing.JTextField();
        Add_Mapping_BT = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Defined_Mappings = new javax.swing.JTable();
        Reset_BT = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(258, 32767));
        setMinimumSize(new java.awt.Dimension(258, 510));
        setPreferredSize(new java.awt.Dimension(258, 520));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(10, 500));

        Rows_Range_L.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Rows_Range_L.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Rows_Range_L.setText("Rows");
        Rows_Range_L.setMaximumSize(new java.awt.Dimension(60, 20));
        Rows_Range_L.setMinimumSize(new java.awt.Dimension(60, 20));
        Rows_Range_L.setPreferredSize(new java.awt.Dimension(60, 20));

        RowsFrom_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RowsFrom_TB.setText("0");

        RowsTo_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RowsTo_TB.setText("100");

        Columns_Range_L.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Columns_Range_L.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Columns_Range_L.setText("Columns");
        Columns_Range_L.setMaximumSize(new java.awt.Dimension(60, 20));
        Columns_Range_L.setMinimumSize(new java.awt.Dimension(60, 20));
        Columns_Range_L.setPreferredSize(new java.awt.Dimension(60, 20));

        ColumnsFrom_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ColumnsFrom_TB.setText("0");

        ColumnsTo_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ColumnsTo_TB.setText("100");

        From_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        From_L.setText("From");
        From_L.setMaximumSize(new java.awt.Dimension(60, 20));
        From_L.setMinimumSize(new java.awt.Dimension(60, 20));
        From_L.setPreferredSize(new java.awt.Dimension(60, 20));

        To_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        To_L.setText("To");
        To_L.setMaximumSize(new java.awt.Dimension(60, 20));
        To_L.setMinimumSize(new java.awt.Dimension(60, 20));
        To_L.setPreferredSize(new java.awt.Dimension(60, 20));

        Mapping_L.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Mapping_L.setText("Mapping ");
        Mapping_L.setMaximumSize(new java.awt.Dimension(60, 20));
        Mapping_L.setMinimumSize(new java.awt.Dimension(60, 20));
        Mapping_L.setPreferredSize(new java.awt.Dimension(60, 20));

        Operation_Range_L1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Operation_Range_L1.setText("Operation Application Range");
        Operation_Range_L1.setMaximumSize(new java.awt.Dimension(60, 20));
        Operation_Range_L1.setMinimumSize(new java.awt.Dimension(60, 20));
        Operation_Range_L1.setPreferredSize(new java.awt.Dimension(60, 20));

        Source_Range_L.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Source_Range_L.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Source_Range_L.setText("Source Range");
        Source_Range_L.setMaximumSize(new java.awt.Dimension(60, 20));
        Source_Range_L.setMinimumSize(new java.awt.Dimension(60, 20));
        Source_Range_L.setPreferredSize(new java.awt.Dimension(60, 20));

        MappingFrom_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        MappingFrom_TB.setText("0");

        MappingTo_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        MappingTo_TB.setText("100");

        Mapping_To_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Mapping_To_L.setText("To");
        Mapping_To_L.setMaximumSize(new java.awt.Dimension(60, 20));
        Mapping_To_L.setMinimumSize(new java.awt.Dimension(60, 20));
        Mapping_To_L.setPreferredSize(new java.awt.Dimension(60, 20));

        Mapping_From_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Mapping_From_L.setText("From");
        Mapping_From_L.setMaximumSize(new java.awt.Dimension(60, 20));
        Mapping_From_L.setMinimumSize(new java.awt.Dimension(60, 20));
        Mapping_From_L.setPreferredSize(new java.awt.Dimension(60, 20));

        New_Value_L.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        New_Value_L.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        New_Value_L.setText("New Value");
        New_Value_L.setMaximumSize(new java.awt.Dimension(60, 20));
        New_Value_L.setMinimumSize(new java.awt.Dimension(60, 20));
        New_Value_L.setPreferredSize(new java.awt.Dimension(60, 20));

        NewValue_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NewValue_TB.setText("0");

        Add_Mapping_BT.setText("Add");
        Add_Mapping_BT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Add_Mapping_BTActionPerformed(evt);
            }
        });

        Defined_Mappings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "From", "To", "New"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Defined_Mappings);

        Reset_BT.setText("Reset");
        Reset_BT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Reset_BTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(Mapping_L, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Operation_Range_L1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(Columns_Range_L, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(10, 10, 10)
                                            .addComponent(ColumnsFrom_TB, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(ColumnsTo_TB, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(Rows_Range_L, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(RowsFrom_TB)
                                                .addComponent(From_L, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(To_L, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(RowsTo_TB))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(Source_Range_L, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(MappingFrom_TB)
                                            .addComponent(Mapping_From_L, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(Mapping_To_L, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(MappingTo_TB, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(New_Value_L, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                    .addComponent(Reset_BT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Add_Mapping_BT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(NewValue_TB))))
                        .addGap(2, 2, 2)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Operation_Range_L1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(From_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(To_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RowsTo_TB)
                    .addComponent(RowsFrom_TB)
                    .addComponent(Rows_Range_L, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ColumnsTo_TB)
                    .addComponent(Columns_Range_L, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ColumnsFrom_TB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(Mapping_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Mapping_From_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Mapping_To_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MappingTo_TB)
                    .addComponent(MappingFrom_TB)
                    .addComponent(Source_Range_L, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(New_Value_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NewValue_TB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Add_Mapping_BT)
                    .addComponent(Reset_BT))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void Add_Mapping_BTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Add_Mapping_BTActionPerformed
    {//GEN-HEADEREND:event_Add_Mapping_BTActionPerformed
        mappings.add(new double[]
        {
            Double.valueOf(MappingFrom_TB.getText()),
            Double.valueOf(MappingTo_TB.getText()),
            Double.valueOf(NewValue_TB.getText())
        });

        UpdateDefinedMapsDG();
    }//GEN-LAST:event_Add_Mapping_BTActionPerformed

    private void Reset_BTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Reset_BTActionPerformed
    {//GEN-HEADEREND:event_Reset_BTActionPerformed
        mappings.clear();
        UpdateDefinedMapsDG();
    }//GEN-LAST:event_Reset_BTActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_Mapping_BT;
    private javax.swing.JTextField ColumnsFrom_TB;
    private javax.swing.JTextField ColumnsTo_TB;
    private javax.swing.JLabel Columns_Range_L;
    private javax.swing.JTable Defined_Mappings;
    private javax.swing.JLabel From_L;
    private javax.swing.JTextField MappingFrom_TB;
    private javax.swing.JTextField MappingTo_TB;
    private javax.swing.JLabel Mapping_From_L;
    private javax.swing.JLabel Mapping_L;
    private javax.swing.JLabel Mapping_To_L;
    private javax.swing.JTextField NewValue_TB;
    private javax.swing.JLabel New_Value_L;
    private javax.swing.JLabel Operation_Range_L1;
    private javax.swing.JButton Reset_BT;
    private javax.swing.JTextField RowsFrom_TB;
    private javax.swing.JTextField RowsTo_TB;
    private javax.swing.JLabel Rows_Range_L;
    private javax.swing.JLabel Source_Range_L;
    private javax.swing.JLabel To_L;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public DiscretizeOptions GetValues()
    {
        double[][] mapping = new double[mappings.size()][3];

        for (int i = 0 ; i < mappings.size() ; i++)
        {
            mapping[i][0] = mappings.get(i)[0];
            mapping[i][1] = mappings.get(i)[1];
            mapping[i][2] = mappings.get(i)[2];
        }

        DiscretizeOptions options
                          = new DiscretizeOptions(
                        Integer.valueOf(ColumnsFrom_TB.getText()),
                        Integer.valueOf(ColumnsTo_TB.getText()),
                        Integer.valueOf(RowsFrom_TB.getText()),
                        Integer.valueOf(RowsTo_TB.getText()));
        options.mappings = mapping;
        return options;
    }

    public void SetValues(DiscretizeOptions values)
    {
        if (values != null)
        {
            ColumnsFrom_TB.setText(String.valueOf(values.range.ColumnFrom));
            ColumnsTo_TB.setText(String.valueOf(values.range.ColumnTo));
            RowsFrom_TB.setText(String.valueOf(values.range.RowFrom));
            RowsTo_TB.setText(String.valueOf(values.range.RowTo));

            mappings.clear();
            if (values.mappings != null)
                for (double[] mapping : values.mappings)
                    mappings.add(new double[]
                    {
                        mapping[0], mapping[1], mapping[2]
                    });

            UpdateDefinedMapsDG();
        }
        else
        {
            mappings.clear();
            ColumnsFrom_TB.setText("0");
            ColumnsTo_TB.setText("0");
            RowsFrom_TB.setText("0");
            RowsTo_TB.setText("0");
        }

        MappingFrom_TB.setText("0");
        MappingTo_TB.setText("0");
        NewValue_TB.setText("0");
    }


    private void UpdateDefinedMapsDG()
    {
        DefaultTableModel model = new DefaultTableModel()
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        };

        model.setColumnIdentifiers(new String[]
        {
            "From", "To", "New"
        });

        for (int i = 0 ; i < mappings.size() ; i++)
        {
            model.addRow(new Double[]
            {
                mappings.get(i)[0], mappings.get(i)[1], mappings.get(i)[2]
            });
        }

        this.Defined_Mappings.setModel(model);
    }
}
