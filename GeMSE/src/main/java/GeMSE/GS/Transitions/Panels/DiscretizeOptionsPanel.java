/** GenoMetric Space Explorer (GeMSE) Copyright (C) 2017 Vahid Jalili
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */
package GeMSE.GS.Transitions.Panels;

import GeMSE.GS.Transitions.Options.DiscretizeOptions;
import GeMSE.GS.Transitions.Options.Map;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vahid Jalili
 */
public class DiscretizeOptionsPanel extends javax.swing.JPanel
{
    /**
     * Creates new form Select_Options
     */
    public DiscretizeOptionsPanel()
    {
        initComponents();

        _maps = new ArrayList<>();
        _maps.add(new Map(Double.NEGATIVE_INFINITY, 0, Map.Function.Static, 0));
        _maps.add(new Map(0, Double.POSITIVE_INFINITY, Map.Function.Static, 0));
        UpdateDefinedMapsDG();
    }

    private ArrayList<Map> _maps;
    private double _minValue;
    private double _maxValue;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        Rows_Range_L = new javax.swing.JLabel();
        RowsFrom_TB = new javax.swing.JTextField();
        RowsTo_TB = new javax.swing.JTextField();
        Columns_Range_L = new javax.swing.JLabel();
        ColumnsFrom_TB = new javax.swing.JTextField();
        ColumnsTo_TB = new javax.swing.JTextField();
        From_L = new javax.swing.JLabel();
        To_L = new javax.swing.JLabel();
        Mapping_L = new javax.swing.JLabel();
        Operation_Range_L1 = new javax.swing.JLabel();
        LeftValue_TB = new javax.swing.JTextField();
        LeftValue_L = new javax.swing.JLabel();
        Add_Mapping_BT = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Defined_Mappings = new javax.swing.JTable();
        Reset_BT = new javax.swing.JButton();
        FromTitle_L = new javax.swing.JLabel();
        FromValue_L = new javax.swing.JLabel();
        Break_L = new javax.swing.JLabel();
        Break_TB = new javax.swing.JTextField();
        RightValue_TB = new javax.swing.JTextField();
        RightValue_L = new javax.swing.JLabel();
        ToTitle_L = new javax.swing.JLabel();
        ToValue_L = new javax.swing.JLabel();
        LeftValue_CB = new javax.swing.JCheckBox();
        RightValue_CB = new javax.swing.JCheckBox();

        setMaximumSize(new java.awt.Dimension(258, 32767));
        setMinimumSize(new java.awt.Dimension(258, 510));
        setPreferredSize(new java.awt.Dimension(258, 520));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(10, 500));

        Rows_Range_L.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Rows_Range_L.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Rows_Range_L.setText("Rows");
        Rows_Range_L.setMaximumSize(new java.awt.Dimension(60, 20));
        Rows_Range_L.setMinimumSize(new java.awt.Dimension(60, 20));
        Rows_Range_L.setPreferredSize(new java.awt.Dimension(60, 20));

        RowsFrom_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RowsFrom_TB.setText("0");

        RowsTo_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RowsTo_TB.setText("100");

        Columns_Range_L.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Columns_Range_L.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Columns_Range_L.setText("Columns");
        Columns_Range_L.setMaximumSize(new java.awt.Dimension(60, 20));
        Columns_Range_L.setMinimumSize(new java.awt.Dimension(60, 20));
        Columns_Range_L.setPreferredSize(new java.awt.Dimension(60, 20));

        ColumnsFrom_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ColumnsFrom_TB.setText("0");

        ColumnsTo_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ColumnsTo_TB.setText("100");

        From_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        From_L.setText("From");
        From_L.setMaximumSize(new java.awt.Dimension(60, 20));
        From_L.setMinimumSize(new java.awt.Dimension(60, 20));
        From_L.setPreferredSize(new java.awt.Dimension(60, 20));

        To_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        To_L.setText("To");
        To_L.setMaximumSize(new java.awt.Dimension(60, 20));
        To_L.setMinimumSize(new java.awt.Dimension(60, 20));
        To_L.setPreferredSize(new java.awt.Dimension(60, 20));

        Mapping_L.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Mapping_L.setText("Mapping ");
        Mapping_L.setMaximumSize(new java.awt.Dimension(60, 20));
        Mapping_L.setMinimumSize(new java.awt.Dimension(60, 20));
        Mapping_L.setPreferredSize(new java.awt.Dimension(60, 20));

        Operation_Range_L1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Operation_Range_L1.setText("Operation Application Range");
        Operation_Range_L1.setMaximumSize(new java.awt.Dimension(60, 20));
        Operation_Range_L1.setMinimumSize(new java.awt.Dimension(60, 20));
        Operation_Range_L1.setPreferredSize(new java.awt.Dimension(60, 20));

        LeftValue_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        LeftValue_TB.setText("0");

        LeftValue_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LeftValue_L.setText("value");
        LeftValue_L.setMaximumSize(new java.awt.Dimension(60, 20));
        LeftValue_L.setMinimumSize(new java.awt.Dimension(60, 20));
        LeftValue_L.setPreferredSize(new java.awt.Dimension(60, 20));

        Add_Mapping_BT.setText("Add");
        Add_Mapping_BT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Add_Mapping_BTActionPerformed(evt);
            }
        });

        Defined_Mappings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "From", "To", "New"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Defined_Mappings);

        Reset_BT.setText("Reset");
        Reset_BT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Reset_BTActionPerformed(evt);
            }
        });

        FromTitle_L.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        FromTitle_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FromTitle_L.setText("From");
        FromTitle_L.setMaximumSize(new java.awt.Dimension(60, 20));
        FromTitle_L.setMinimumSize(new java.awt.Dimension(60, 20));
        FromTitle_L.setPreferredSize(new java.awt.Dimension(60, 20));

        FromValue_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FromValue_L.setText("- âˆž");
        FromValue_L.setMaximumSize(new java.awt.Dimension(60, 20));
        FromValue_L.setMinimumSize(new java.awt.Dimension(60, 20));

        Break_L.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Break_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Break_L.setText("break");
        Break_L.setMaximumSize(new java.awt.Dimension(60, 20));
        Break_L.setMinimumSize(new java.awt.Dimension(60, 20));
        Break_L.setPreferredSize(new java.awt.Dimension(60, 20));

        Break_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Break_TB.setText("0");
        Break_TB.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                Break_TBKeyReleased(evt);
            }
        });

        RightValue_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RightValue_TB.setText("0");

        RightValue_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RightValue_L.setText("value");
        RightValue_L.setMaximumSize(new java.awt.Dimension(60, 20));
        RightValue_L.setMinimumSize(new java.awt.Dimension(60, 20));
        RightValue_L.setPreferredSize(new java.awt.Dimension(60, 20));

        ToTitle_L.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        ToTitle_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ToTitle_L.setText("To");
        ToTitle_L.setMaximumSize(new java.awt.Dimension(60, 20));
        ToTitle_L.setMinimumSize(new java.awt.Dimension(60, 20));
        ToTitle_L.setPreferredSize(new java.awt.Dimension(60, 20));

        ToValue_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ToValue_L.setText("+ âˆž");
        ToValue_L.setMaximumSize(new java.awt.Dimension(60, 20));
        ToValue_L.setMinimumSize(new java.awt.Dimension(60, 20));

        LeftValue_CB.setSelected(true);
        LeftValue_CB.setText("Change");
        LeftValue_CB.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LeftValue_CB.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        LeftValue_CB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                LeftValue_CBActionPerformed(evt);
            }
        });

        RightValue_CB.setSelected(true);
        RightValue_CB.setText("Change");
        RightValue_CB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RightValue_CBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(Mapping_L, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Operation_Range_L1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(Reset_BT, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Add_Mapping_BT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Columns_Range_L, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(ColumnsFrom_TB, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ColumnsTo_TB, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Rows_Range_L, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(RowsFrom_TB)
                                            .addComponent(From_L, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(To_L, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(RowsTo_TB))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(2, 2, 2))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(FromValue_L, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(FromTitle_L, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(LeftValue_L, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                    .addComponent(LeftValue_TB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)))
                            .addComponent(LeftValue_CB, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Break_TB)
                            .addComponent(Break_L, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RightValue_TB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(RightValue_L, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(ToValue_L, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2))
                                    .addComponent(ToTitle_L, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(RightValue_CB, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Operation_Range_L1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(From_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(To_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RowsTo_TB)
                    .addComponent(RowsFrom_TB)
                    .addComponent(Rows_Range_L, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ColumnsTo_TB)
                    .addComponent(Columns_Range_L, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ColumnsFrom_TB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(Mapping_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LeftValue_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FromTitle_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Break_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RightValue_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ToTitle_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(LeftValue_TB)
                    .addComponent(FromValue_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Break_TB)
                    .addComponent(RightValue_TB)
                    .addComponent(ToValue_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LeftValue_CB)
                    .addComponent(RightValue_CB))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Add_Mapping_BT)
                    .addComponent(Reset_BT))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void Add_Mapping_BTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Add_Mapping_BTActionPerformed
    {//GEN-HEADEREND:event_Add_Mapping_BTActionPerformed
        UpdateMappings();
        UpdateDefinedMapsDG();
    }//GEN-LAST:event_Add_Mapping_BTActionPerformed

    private void Reset_BTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Reset_BTActionPerformed
    {//GEN-HEADEREND:event_Reset_BTActionPerformed
        _maps.clear();
        UpdateDefinedMapsDG();
    }//GEN-LAST:event_Reset_BTActionPerformed

    private void LeftValue_CBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_LeftValue_CBActionPerformed
    {//GEN-HEADEREND:event_LeftValue_CBActionPerformed
        if (LeftValue_CB.isSelected())
        {
            LeftValue_TB.setEnabled(true);
            LeftValue_L.setEnabled(true);
            FromTitle_L.setEnabled(true);
            FromValue_L.setEnabled(true);
        }
        else
        {
            LeftValue_TB.setEnabled(false);
            LeftValue_L.setEnabled(false);
            FromTitle_L.setEnabled(false);
            FromValue_L.setEnabled(false);
        }
    }//GEN-LAST:event_LeftValue_CBActionPerformed

    private void RightValue_CBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_RightValue_CBActionPerformed
    {//GEN-HEADEREND:event_RightValue_CBActionPerformed
        if (RightValue_CB.isSelected())
        {
            RightValue_TB.setEnabled(true);
            RightValue_L.setEnabled(true);
            ToTitle_L.setEnabled(true);
            ToValue_L.setEnabled(true);
        }
        else
        {
            RightValue_TB.setEnabled(false);
            RightValue_L.setEnabled(false);
            ToTitle_L.setEnabled(false);
            ToValue_L.setEnabled(false);
        }
    }//GEN-LAST:event_RightValue_CBActionPerformed

    private void Break_TBKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_Break_TBKeyReleased
    {//GEN-HEADEREND:event_Break_TBKeyReleased
        double input_Value = Double.valueOf(Break_TB.getText());

        for (Map range : _maps)
        {
            if (input_Value >= range.GetRangeStart() && input_Value <= range.GetRaneStop())
            {
                if (range.GetRangeStart() == Double.NEGATIVE_INFINITY)
                    FromValue_L.setText("- âˆž");
                else
                    FromValue_L.setText(String.valueOf(range.GetRangeStart()));

                if (range.GetRaneStop() == Double.POSITIVE_INFINITY)
                    ToValue_L.setText("+ âˆž");
                else
                    ToValue_L.setText(String.valueOf(range.GetRaneStop()));
            }
        }
    }//GEN-LAST:event_Break_TBKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_Mapping_BT;
    private javax.swing.JLabel Break_L;
    private javax.swing.JTextField Break_TB;
    private javax.swing.JTextField ColumnsFrom_TB;
    private javax.swing.JTextField ColumnsTo_TB;
    private javax.swing.JLabel Columns_Range_L;
    private javax.swing.JTable Defined_Mappings;
    private javax.swing.JLabel FromTitle_L;
    private javax.swing.JLabel FromValue_L;
    private javax.swing.JLabel From_L;
    private javax.swing.JCheckBox LeftValue_CB;
    private javax.swing.JLabel LeftValue_L;
    private javax.swing.JTextField LeftValue_TB;
    private javax.swing.JLabel Mapping_L;
    private javax.swing.JLabel Operation_Range_L1;
    private javax.swing.JButton Reset_BT;
    private javax.swing.JCheckBox RightValue_CB;
    private javax.swing.JLabel RightValue_L;
    private javax.swing.JTextField RightValue_TB;
    private javax.swing.JTextField RowsFrom_TB;
    private javax.swing.JTextField RowsTo_TB;
    private javax.swing.JLabel Rows_Range_L;
    private javax.swing.JLabel ToTitle_L;
    private javax.swing.JLabel ToValue_L;
    private javax.swing.JLabel To_L;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public DiscretizeOptions GetValues()
    {
        ArrayList<Map> maps = new ArrayList<>();
        for (Map map : _maps)
            if (!Double.isNaN(map.GetArgument()))
                maps.add(map);

        DiscretizeOptions options
                          = new DiscretizeOptions(
                        _minValue,
                        _maxValue,
                        Integer.valueOf(ColumnsFrom_TB.getText()),
                        Integer.valueOf(ColumnsTo_TB.getText()),
                        Integer.valueOf(RowsFrom_TB.getText()),
                        Integer.valueOf(RowsTo_TB.getText()));
        options.maps = maps;
        return options;
    }


    public void SetValues(DiscretizeOptions values)
    {
        if (values != null)
        {
            ColumnsFrom_TB.setText(String.valueOf(values.range.ColumnFrom));
            ColumnsTo_TB.setText(String.valueOf(values.range.ColumnTo));
            RowsFrom_TB.setText(String.valueOf(values.range.RowFrom));
            RowsTo_TB.setText(String.valueOf(values.range.RowTo));

            _maps.clear();
            if (values.maps != null)
                values.maps.forEach((map) ->
                {
                    _maps.add(map);
                });

            _minValue = values.GetMinValue();
            _maxValue = values.GetMaxValue();
            UpdateDefinedMapsDG();
        }
        else
        {
            ColumnsFrom_TB.setText("0");
            ColumnsTo_TB.setText("0");
            RowsFrom_TB.setText("0");
            RowsTo_TB.setText("0");
            _maps.clear();
        }
    }


    private void UpdateDefinedMapsDG()
    {
        DefaultTableModel DefinedMappingsTabModel = new DefaultTableModel()
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        };

        DefinedMappingsTabModel.setColumnIdentifiers(new String[]
        {
            "From", "To", "value"
        });

        _maps.forEach((map) ->
        {
            DefinedMappingsTabModel.addRow(new Double[]
            {
                map.GetRangeStart(), map.GetRaneStop(), map.GetArgument()
            });
        });

        this.Defined_Mappings.setModel(DefinedMappingsTabModel);
    }


    private void UpdateMappings()
    {
        double from;
        if (FromValue_L.getText().equals("- âˆž"))
            from = Double.NEGATIVE_INFINITY;
        else
            from = Double.valueOf(FromValue_L.getText());

        double to;
        if (ToValue_L.getText().equals("+ âˆž"))
            to = Double.POSITIVE_INFINITY;
        else
            to = Double.valueOf(ToValue_L.getText());

        for (int i = 0 ; i < _maps.size() ; i++)
            if (_maps.get(i).GetRangeStart() == from)
            {
                _maps.remove(i);
                i--;
            }

        if (LeftValue_CB.isSelected())
        {
            _maps.add(new Map(
                    from,
                    Double.valueOf(Break_TB.getText()),
                    Map.Function.Static,
                    Double.valueOf(LeftValue_TB.getText())));
        }
        else
        {
            _maps.add(new Map(
                    from,
                    Double.valueOf(Break_TB.getText()),
                    Map.Function.Static,
                    Double.NaN
            ));
        }

        if (RightValue_CB.isSelected())
        {
            _maps.add(new Map(
                    Double.valueOf(Break_TB.getText()),
                    to,
                    Map.Function.Static,
                    Double.valueOf(RightValue_TB.getText())
            ));
        }
        else
        {
            _maps.add(new Map(
                    Double.valueOf(Break_TB.getText()),
                    to,
                    Map.Function.Static,
                    Double.NaN
            ));
        }

        Collections.sort(_maps, (Map o1, Map o2) ->
                 {
                     if (o1.GetRangeStart() < o2.GetRangeStart()) return -1;
                     if (o1.GetRangeStart() > o2.GetRangeStart()) return 1;
                     return 0;
                 });
    }
}
