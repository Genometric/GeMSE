/** GenoMetric Space Explorer (GeMSE) Copyright (C) 2017 Vahid Jalili
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */
package GeMSE.GS.Stats;

import GeMSE.GS.History.NodeData;
import GeMSE.GS.Space;
import GeMSE.GlobalVariables;
import GeMSE.OperationsOptions.ClusteringOptions;
import GeMSE.OperationsPanels.OVDendrogramPanel;
import GeMSE.Popups.TreeClickListener;
import GeMSE.StateSpaceTree.A2MConverter;
import GeMSE.StateSpaceTree.StateSpaceTreeRenderer;
import GeMSE.StateSpaceTree.TreeNodeVector;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Vahid Jalili
 */
public class StatisticalSignificanceWindow extends javax.swing.JFrame
{

    /**
     * Creates new form StatisticalSignificanceWindow
     */
    public StatisticalSignificanceWindow()
    {
        initComponents();
        _tTestPanelOneSample = new OneSampleTTestPanel();
        _tTestPanelTwoSample = new TwoSampleTTestPanel();
        _sampleA = new double[0];
        _sampleB = new double[0];

        _treeA = new JTree();
        _treeA.addMouseListener(new TreeClickListener());
        _treeA.addTreeSelectionListener(this::TreeASelectionChanged);
        CreateStateTransitionTree(_treeA, Sample1SP);

        _treeB = new JTree();
        _treeB.addMouseListener(new TreeClickListener());
        _treeB.addTreeSelectionListener(this::TreeBSelectionChanged);
        CreateStateTransitionTree(_treeB, Sample2SP);

        TestCB.addItem(_ttest);
        TestCB.setSelectedIndex(0);
    }

    private final JTree _treeA;
    private final JTree _treeB;

    private double[] _sampleA;
    private double[] _sampleB;

    private String _ttest = "Student's t-test";

    private OneSampleTTestPanel _tTestPanelOneSample;
    private TwoSampleTTestPanel _tTestPanelTwoSample;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel3 = new javax.swing.JPanel();
        TestDescriptionL = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TestDescriptionTP = new javax.swing.JTextPane();
        TestCB = new javax.swing.JComboBox<>();
        ChooseTestL = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        Sample1SP = new javax.swing.JScrollPane();
        Sample1CB = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        Sample2SP = new javax.swing.JScrollPane();
        Sample2CB = new javax.swing.JCheckBox();
        ResultsSP = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        TestDescriptionL.setText("Description");

        TestDescriptionTP.setBackground(new java.awt.Color(238, 238, 238));
        TestDescriptionTP.setBorder(null);
        TestDescriptionTP.setFont(new java.awt.Font("Lucida Grande", 2, 12)); // NOI18N
        TestDescriptionTP.setCaretColor(new java.awt.Color(238, 238, 238));
        TestDescriptionTP.setDropTarget(null);
        TestDescriptionTP.setFocusTraversalKeysEnabled(false);
        TestDescriptionTP.setFocusable(false);
        jScrollPane1.setViewportView(TestDescriptionTP);

        TestCB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                TestCBActionPerformed(evt);
            }
        });

        ChooseTestL.setText("Choose a test");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(TestCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(TestDescriptionL)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(ChooseTestL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ChooseTestL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TestCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TestDescriptionL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Sample1CB.setText("Sample 1");
        Sample1CB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Sample1CBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Sample1SP)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(Sample1CB)
                        .addGap(0, 125, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Sample1CB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Sample1SP, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Sample2CB.setText("Sample 2");
        Sample2CB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Sample2CBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Sample2SP)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(Sample2CB)
                        .addGap(0, 125, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Sample2CB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Sample2SP)
                .addContainerGap())
        );

        jMenu1.setText(" File ");
        jMenuBar1.add(jMenu1);

        jMenu2.setText(" Edit ");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ResultsSP, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(ResultsSP))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TestCBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_TestCBActionPerformed
    {//GEN-HEADEREND:event_TestCBActionPerformed
        PerformSignificanceTest();
    }//GEN-LAST:event_TestCBActionPerformed

    private void Sample1CBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Sample1CBActionPerformed
    {//GEN-HEADEREND:event_Sample1CBActionPerformed
        PerformSignificanceTest();
    }//GEN-LAST:event_Sample1CBActionPerformed

    private void Sample2CBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Sample2CBActionPerformed
    {//GEN-HEADEREND:event_Sample2CBActionPerformed
        PerformSignificanceTest();
    }//GEN-LAST:event_Sample2CBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(StatisticalSignificanceWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(StatisticalSignificanceWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(StatisticalSignificanceWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(StatisticalSignificanceWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new StatisticalSignificanceWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ChooseTestL;
    private javax.swing.JScrollPane ResultsSP;
    private javax.swing.JCheckBox Sample1CB;
    private javax.swing.JScrollPane Sample1SP;
    private javax.swing.JCheckBox Sample2CB;
    private javax.swing.JScrollPane Sample2SP;
    private javax.swing.JComboBox<String> TestCB;
    private javax.swing.JLabel TestDescriptionL;
    private javax.swing.JTextPane TestDescriptionTP;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void PerformSignificanceTest()
    {
        String selectedTest = (String) TestCB.getSelectedItem();
        if (selectedTest.equals(_ttest))
        {
            if (Sample1CB.isSelected() && Sample2CB.isSelected())
            {
                ResultsSP.setViewportView(_tTestPanelTwoSample);
                _tTestPanelTwoSample.RunAnalysis(_sampleA, _sampleB);
            }
            else if (Sample1CB.isSelected())
            {
                ResultsSP.setViewportView(_tTestPanelOneSample);
                _tTestPanelOneSample.RunAnalysis(_sampleA);
            }
            else if (Sample2CB.isSelected())
            {
                ResultsSP.setViewportView(_tTestPanelOneSample);
                _tTestPanelOneSample.RunAnalysis(_sampleB);
            }
            else
            {
                ResultsSP.setViewportView(null);
                ResultsSP.repaint();
            }
        }
    }

    private void TreeASelectionChanged(TreeSelectionEvent e)
    {
        _sampleA = GetNodeVector(_treeA);
        PerformSignificanceTest();
    }

    private void TreeBSelectionChanged(TreeSelectionEvent e)
    {
        _sampleB = GetNodeVector(_treeB);
        PerformSignificanceTest();
    }

    private double[] GetNodeVector(JTree tree)
    {
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        if (selectedNode != null)
        {
            NodeData nodeData = (NodeData) selectedNode.getUserObject();
            return GlobalVariables.space.GetSpace(nodeData.GetSpaceID()).GetVector();
        }
        else
        {
            return new double[0];
        }
    }

    private void CreateStateTransitionTree(JTree tree, JScrollPane pane)
    {
        A2MConverter converter = new A2MConverter();

        DefaultMutableTreeNode previouslySelectedNode = null;

        if (tree != null)
            previouslySelectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();

        DefaultMutableTreeNode newTree = converter.GetNodes(GlobalVariables.space.GetTree());

        tree.setModel(new DefaultTreeModel(newTree));
        tree.setOpaque(false);
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        tree.setRootVisible(true);
        TreeCellRenderer renderer = new StateSpaceTreeRenderer();
        tree.setCellRenderer(renderer);

        pane.setViewportView(tree);

        if (previouslySelectedNode != null)
        {
            TreePath newPath = converter.GetPath((NodeData) previouslySelectedNode.getUserObject(), newTree);
            tree.expandPath(newPath);
            tree.setSelectionPath(newPath);
            tree.scrollPathToVisible(tree.getSelectionPath());
            tree.setScrollsOnExpand(true);
            tree.setExpandsSelectedPaths(true);
        }
    }
}
