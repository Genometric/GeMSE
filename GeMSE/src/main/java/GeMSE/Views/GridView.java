/** GenoMetric Space Explorer (GeMSE) Copyright (C) 2017 Vahid Jalili
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */
package GeMSE.Views;

import GeMSE.GS.Space;
import GeMSE.Popups.GSDataGridClickListener;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vahid Jalili
 */
public class GridView extends javax.swing.JPanel
{

    /**
     * Creates new form GridView
     */
    public GridView()
    {
        initComponents();
        space_DG.addMouseListener(new GSDataGridClickListener(null));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        space_DG = new javax.swing.JTable();

        space_DG.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {},
                {},
                {},
                {}
            },
            new String []
            {

            }
        ));
        space_DG.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        space_DG.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(space_DG);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable space_DG;
    // End of variables declaration//GEN-END:variables

    public void Display(Space space)
    {
        DefaultTableModel spaceTabMod = new DefaultTableModel()
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        };

        String[] gotColumnTitle = space.colTitle;
        String[] gotRowTitle = space.rowTitle;
        String[] columnTitle = new String[gotColumnTitle.length + 2];
        columnTitle[0] = "index";
        columnTitle[1] = "Region label";
        System.arraycopy(gotColumnTitle, 0, columnTitle, 2, gotColumnTitle.length);

        spaceTabMod.setColumnIdentifiers(columnTitle);

        int spaceColSize = space.content[0].length;

        int col = 0;
        for (int r = 0 ; r < space.content.length ; r++)
        {
            String[] row = new String[spaceColSize + 2];
            row[0] = Integer.toString(r);
            row[1] = gotRowTitle[r];

            for (col = 0 ; col < spaceColSize ; col++)
                row[col + 2] = Double.toString(space.content[r][col]);

            spaceTabMod.addRow(row);
        }

        space_DG.setModel(spaceTabMod);
        space_DG.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        space_DG.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        DatagridFunctions.ResizeColumnWidth(this.space_DG);
    }
}
