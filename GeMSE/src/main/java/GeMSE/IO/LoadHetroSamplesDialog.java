/** GenoMetric Space Explorer (GeMSE) Copyright (C) 2017 Vahid Jalili
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */
package GeMSE.IO;

import GeMSE.GS.SampleData;
import GeMSE.GlobalVariables;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Vahid Jalili
 */
public class LoadHetroSamplesDialog extends javax.swing.JDialog
{

    /**
     * Creates new form LoadHetroSamplesDialog
     *
     * @param parent
     * @param modal
     */
    public LoadHetroSamplesDialog(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
        _parent = parent;
        ButtonGroup group = new ButtonGroup();
        group.add(UseCachedRef_RB);
        group.add(LoadNewRef_RB);

        AggregateFunctions_CB.setModel(new DefaultComboBoxModel(GenometricMapper.MapOp.values()));

        Determined_Atts_CB.removeAllItems();
        for (String att : GeMSE.GlobalVariables.AllNumAttributes())
            Determined_Atts_CB.addItem(att);

        _fileNameExtensionFilters = new ArrayList<>();
        _fileNameExtensionFilters.add(new FileNameExtensionFilter(_tGTFDescription, "GTF"));
        _fileNameExtensionFilters.add(new FileNameExtensionFilter(_tCSVDescription, "CSV", "TXT"));
        _fileNameExtensionFilters.add(new FileNameExtensionFilter(_tBEDDescription, "BED"));
        _fileNameExtensionFilters.add(new FileNameExtensionFilter(_narrowPeakDescription, "narrowPeak"));
        _fileNameExtensionFilters.add(new FileNameExtensionFilter(_broadPeakDescription, "broadPeak"));
        _fileNameExtensionFilters.sort(new FileExtensionComparer());

        if (GlobalVariables.annotations.fileName == null
            || GlobalVariables.annotations.fileName.trim().isEmpty())
        {
            CachedRefLabel.setText("No reference sample is cached.");
            UseCachedRef_RB.setEnabled(false);
            CachedRefLabel.setEnabled(false);
        }
        else
        {
            CachedRefLabel.setText(GlobalVariables.annotations.fullPath);
            UseCachedRef_RB.setEnabled(true);
            CachedRefLabel.setEnabled(true);
        }
    }

    private String _reference = "";
    private String _reffileFilterDescription = "";
    private String[] _samples;
    private Boolean _result;
    private final java.awt.Frame _parent;

    private final String _tGTFDescription = "General Feature Format (GTF)";
    private final String _tCSVDescription = "General Tab-delimited (CSV)";
    private final String _tBEDDescription = "Browser Extensible Data (BED)";
    private final String _narrowPeakDescription = "ENCODE narrowPeak";
    private final String _broadPeakDescription = "ENCODE broadPeak";
    private final ArrayList<FileNameExtensionFilter> _fileNameExtensionFilters;


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        NewRefPath_TB = new javax.swing.JTextField();
        refSampleB = new javax.swing.JButton();
        UseCachedRef_RB = new javax.swing.JRadioButton();
        LoadNewRef_RB = new javax.swing.JRadioButton();
        CacheLoadedRef_CB = new javax.swing.JCheckBox();
        CachedRefLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        Determined_Atts_L = new javax.swing.JLabel();
        Determined_Atts_CB = new javax.swing.JComboBox();
        AggregateFunctions_CB = new javax.swing.JComboBox();
        Determined_Atts_L1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        CancelBT = new javax.swing.JButton();
        LoadBT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        NewRefPath_TB.setEditable(false);

        refSampleB.setText("Browse");
        refSampleB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                refSampleBActionPerformed(evt);
            }
        });

        UseCachedRef_RB.setText("Use the cached reference sample");

        LoadNewRef_RB.setSelected(true);
        LoadNewRef_RB.setText("Load a new reference sample");

        CacheLoadedRef_CB.setSelected(true);
        CacheLoadedRef_CB.setText("Cache this reference");

        CachedRefLabel.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        CachedRefLabel.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(LoadNewRef_RB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UseCachedRef_RB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(NewRefPath_TB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refSampleB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CacheLoadedRef_CB))
                    .addComponent(CachedRefLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UseCachedRef_RB)
                    .addComponent(CachedRefLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoadNewRef_RB)
                    .addComponent(NewRefPath_TB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refSampleB)
                    .addComponent(CacheLoadedRef_CB))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Determined_Atts_L.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Determined_Atts_L.setText("Attribute to aggregate");
        Determined_Atts_L.setMaximumSize(new java.awt.Dimension(115, 14));
        Determined_Atts_L.setMinimumSize(new java.awt.Dimension(115, 14));
        Determined_Atts_L.setPreferredSize(new java.awt.Dimension(115, 14));

        Determined_Atts_L1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Determined_Atts_L1.setText("Aggregate function");
        Determined_Atts_L1.setMaximumSize(new java.awt.Dimension(115, 14));
        Determined_Atts_L1.setMinimumSize(new java.awt.Dimension(115, 14));
        Determined_Atts_L1.setPreferredSize(new java.awt.Dimension(115, 14));

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(214, 217, 223));
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("This operation is applied on the samples being loaded, and (if necessary/available) on previously loaded samples. \n\nIf the reference sample is in GTF format, its annotations are also cached, and can be used to label regions. \n\nIf you choose to cache a new reference, it replaces the previously cached reference (if available). ");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setAlignmentX(2.0F);
        jTextArea1.setAlignmentY(2.0F);
        jTextArea1.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jTextArea1.setCaretColor(new java.awt.Color(214, 217, 223));
        jTextArea1.setDragEnabled(false);
        jTextArea1.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Determined_Atts_L, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Determined_Atts_L1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Determined_Atts_CB, 0, 250, Short.MAX_VALUE)
                    .addComponent(AggregateFunctions_CB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Determined_Atts_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Determined_Atts_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AggregateFunctions_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Determined_Atts_L1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        CancelBT.setText("Cancel");
        CancelBT.setMaximumSize(new java.awt.Dimension(150, 23));
        CancelBT.setMinimumSize(new java.awt.Dimension(150, 23));
        CancelBT.setPreferredSize(new java.awt.Dimension(150, 23));
        CancelBT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CancelBTActionPerformed(evt);
            }
        });

        LoadBT.setText("Load");
        LoadBT.setMaximumSize(new java.awt.Dimension(150, 23));
        LoadBT.setMinimumSize(new java.awt.Dimension(150, 23));
        LoadBT.setPreferredSize(new java.awt.Dimension(150, 23));
        LoadBT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                LoadBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CancelBT, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LoadBT, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CancelBT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LoadBT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refSampleBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_refSampleBActionPerformed
    {//GEN-HEADEREND:event_refSampleBActionPerformed
        LoadNewRef_RB.setSelected(true);
        JFileChooser chooser = new JFileChooser(GlobalVariables.GetLastBrowsedDirectory());
        chooser.setMultiSelectionEnabled((boolean) false);
        chooser.setAcceptAllFileFilterUsed(false);
        for (FileNameExtensionFilter filter : _fileNameExtensionFilters)
            chooser.setFileFilter(filter);

        int returnVal = chooser.showOpenDialog(jPanel1);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            GlobalVariables.SetLastBrowsedDirectoryFromFile(chooser.getSelectedFile().getAbsolutePath());
            _reference = chooser.getSelectedFile().getAbsolutePath();
            _reffileFilterDescription = chooser.getFileFilter().getDescription();
            NewRefPath_TB.setText(_reference);
        }
    }//GEN-LAST:event_refSampleBActionPerformed

    private void CancelBTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CancelBTActionPerformed
    {//GEN-HEADEREND:event_CancelBTActionPerformed
        _result = false;
        dispose();
    }//GEN-LAST:event_CancelBTActionPerformed

    private void LoadBTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_LoadBTActionPerformed
    {//GEN-HEADEREND:event_LoadBTActionPerformed
        if (LoadNewRef_RB.isSelected() && _reference.isEmpty())
        {
            JOptionPane.showMessageDialog(
                    null,
                    "Please specify a reference sample.",
                    "Missing Reference", 2);
        }
        else
        {
            dispose();
            InProgress inProgress = new InProgress(_parent, "Mapping the heterogeneous samples, please wait ...");
            inProgress.setLocationRelativeTo(_parent);
            SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>()
            {
                @Override
                protected Void doInBackground()
                {
                    Load();
                    inProgress.dispose();
                    return null;
                }
            };
            worker.execute();
            inProgress.setVisible(true);
            _result = true;
        }
    }//GEN-LAST:event_LoadBTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(LoadHetroSamplesDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(LoadHetroSamplesDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(LoadHetroSamplesDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(LoadHetroSamplesDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                LoadHetroSamplesDialog dialog = new LoadHetroSamplesDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox AggregateFunctions_CB;
    private javax.swing.JCheckBox CacheLoadedRef_CB;
    private javax.swing.JLabel CachedRefLabel;
    private javax.swing.JButton CancelBT;
    private javax.swing.JComboBox Determined_Atts_CB;
    private javax.swing.JLabel Determined_Atts_L;
    private javax.swing.JLabel Determined_Atts_L1;
    private javax.swing.JButton LoadBT;
    private javax.swing.JRadioButton LoadNewRef_RB;
    private javax.swing.JTextField NewRefPath_TB;
    private javax.swing.JRadioButton UseCachedRef_RB;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton refSampleB;
    // End of variables declaration//GEN-END:variables

    public Boolean GetResult()
    {
        return _result;
    }

    private void Load()
    {
        // Load reference.
        SampleData referenceSample;
        if (!UseCachedRef_RB.isSelected())
        {
            referenceSample = new SampleData();
            switch (_reffileFilterDescription)
            {
                case _tGTFDescription:
                    GTFParser gtfParser = new GTFParser(
                            _reference,
                            false, // No need to find numerical attribute-value pair
                            (byte) 0, // start offset
                            (byte) 0, // chromosome column
                            (byte) 3, // start column
                            (byte) 4, // stop column
                            (byte) 2, // feature column
                            (byte) 8, // attribute column
                            true);    // add "chr" prefix if missing

                    referenceSample = gtfParser.Parse();
                    break;

                case _tCSVDescription:
                case _tBEDDescription:
                case _narrowPeakDescription:
                case _broadPeakDescription:
                    CSVOptions csvColumns = new CSVOptions();
                    csvColumns.columns = new GTDColumns[0];
                    CSVParser csvParser = new CSVParser(_reference, csvColumns);
                    referenceSample = csvParser.Parse();
                    break;
            }

            if (CacheLoadedRef_CB.isSelected())
                GlobalVariables.annotations = referenceSample;
        }
        else
        {
            referenceSample = GlobalVariables.annotations;
        }

        GenometricMapper gMap = new GenometricMapper(
                (GenometricMapper.MapOp) AggregateFunctions_CB.getSelectedItem(),
                Determined_Atts_CB.getSelectedItem().toString());

        for (SampleData sample : GlobalVariables.samples)
        {
            gMap.scan(referenceSample, sample, 0, 0, true);
            SampleData mapResult = gMap.getResults();
            sample.chrCount = mapResult.chrCount;
            sample.determinedFeatures = mapResult.determinedFeatures;
            sample.features = mapResult.features;
            sample.featuresCount = mapResult.featuresCount;
            sample.PasteNumAttributes(mapResult.CopyNumAttributes());
            sample.PasteTXTAttributes(mapResult.CopyTXTAttributes());
        }
    }
}
