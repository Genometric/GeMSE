/** GenoMetric Space Explorer (GeMSE) Copyright (C) 2017 Vahid Jalili
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */
package GeMSE;

import GeMSE.IO.SessionIO;
import GeMSE.Visualization.HeatmapOptions;
import GeMSE.GS.SampleData;
import GeMSE.StateSpaceTree.A2MConverter;
import GeMSE.GS.History.NodeData;
import GeMSE.GS.GenometricSpace;
import GeMSE.StateSpaceTree.StateSpaceTreeRenderer;
import GeMSE.StateSpaceTree.TreeNodeVector;
import GeMSE.Views.OVDendrogramPanel;
import GeMSE.GS.Transitions.Panels.OperationsOptions;
import GeMSE.GS.Analysis.PatternSearch.PatternSearchWindow;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.awt.Dimension;
import java.util.Collections;
import java.util.HashMap;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import GeMSE.GS.Operations.Functions;
import GeMSE.GS.Analysis.Stats.StatisticalInferenceWindow;
import GeMSE.IO.Loader;
import GeMSE.IO.Loader.LoadType;
import GeMSE.IO.OpenWebpage;
import GeMSE.GS.Transitions.Options.ClusteringOptions;
import GeMSE.GS.Transitions.Options.DiscretizeOptions;
import GeMSE.GS.Transitions.Options.SelectOptions;
import GeMSE.GS.Transitions.Options.SortOptions;
import GeMSE.Popups.TreeClickListener;
import GeMSE.Views.GridView;
import GeMSE.Views.HeatmapView;
import GeMSE.Views.WelcomeView;
import GeMSE.Visualization.BoxAndWhiskerPlot;
import java.awt.Component;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Vahid Jalili
 */
public class GeMSE extends javax.swing.JFrame
{
    private final JTree _tree;
    private Object _selectedNodeOperationParameters = null;
    private final OperationsOptions _operationsOptions = new OperationsOptions();
    private OVDendrogramPanel _dendrogramPanel;
    private GridView _gridView;
    private HeatmapView _heatmapView;

    /**
     * Creates new form MainWindow
     */
    public GeMSE()
    {
        initComponents();
        _tree = new JTree();
        _tree.addMouseListener(new TreeClickListener());
        _tree.addTreeSelectionListener(this::TreeSelectionChanged);
        this.setExtendedState(GeMSE.MAXIMIZED_BOTH);

        GlobalVariables.disablePopups = true;

        ((JLabel) Determined_Feat_CB.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel) Determined_Atts_CB.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel) Operations_CB.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);

        jMenuItem2.setEnabled(true);
        EnableDisableSpaceGeneration(false);
        EnableDisableSpaceManipulation(false);
        EnableDisableTransformation(false);

        GlobalVariables.plotElbowMethodOutput = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jMenuItem1 = new javax.swing.JMenuItem();
        HeatmapPopupMenu = new javax.swing.JPopupMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        _inputSamplesDG = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        Determined_Feat_L1 = new javax.swing.JLabel();
        Determined_Feat_CB = new javax.swing.JComboBox();
        Determined_Atts_L = new javax.swing.JLabel();
        Determined_Atts_CB = new javax.swing.JComboBox();
        Create_GS_BT = new javax.swing.JButton();
        HM_Cell_Dim_L = new javax.swing.JLabel();
        Auto_Cell_Dimension_CB = new javax.swing.JCheckBox();
        HM_Cell_Dim_H_L = new javax.swing.JLabel();
        HM_Cell_Dim_MinH_TB = new javax.swing.JTextField();
        HM_Cell_Dim_W_L = new javax.swing.JLabel();
        HM_Cell_Dim_MinW_TB = new javax.swing.JTextField();
        Plot_HeatMap_BT = new javax.swing.JButton();
        AutoUpdatePlotCB = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        Tree_ScrollPane = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        Operations_L1 = new javax.swing.JLabel();
        Operations_CB = new javax.swing.JComboBox();
        Operation_Title_L = new javax.swing.JLabel();
        Operation_Title_TB = new javax.swing.JTextField();
        Apply_Op_BT = new javax.swing.JButton();
        Operations_Options_SP = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        spaceIllustrationTab = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        WelcomePageSP = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        File_JM = new javax.swing.JMenu();
        Load_MI = new javax.swing.JMenuItem();
        Load_Folder_MI = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        SaveSessionMI = new javax.swing.JMenuItem();
        LoadSessionMI = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Exit_MI = new javax.swing.JMenuItem();
        Tools_JM = new javax.swing.JMenu();
        SearchPatternMI = new javax.swing.JMenuItem();
        StatisticalInferenceMI = new javax.swing.JMenuItem();
        ViewMenu = new javax.swing.JMenu();
        boxWhiskerPlotMI = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        HOnlineSupport = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        HOnlineDocs = new javax.swing.JMenu();
        HDInterface = new javax.swing.JMenuItem();
        HDLoadData = new javax.swing.JMenuItem();
        HDLoadNSaveSession = new javax.swing.JMenuItem();
        HDTransitions = new javax.swing.JMenuItem();
        HVideoTutorial = new javax.swing.JMenu();
        HVOverview = new javax.swing.JMenuItem();
        HVDemo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        HVInterface = new javax.swing.JMenuItem();
        HVLoad = new javax.swing.JMenuItem();
        HVSave = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GeMSE (GenoMetric Space Explorer)");
        setIconImages(null);
        setName("MainWindow"); // NOI18N
        addWindowStateListener(new java.awt.event.WindowStateListener()
        {
            public void windowStateChanged(java.awt.event.WindowEvent evt)
            {
                formWindowStateChanged(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        _inputSamplesDG.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Loaded file"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        _inputSamplesDG.setName("_inputSamplesDG"); // NOI18N
        jScrollPane2.setViewportView(_inputSamplesDG);

        Determined_Feat_L1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Determined_Feat_L1.setText("Determined Features");

        Determined_Atts_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Determined_Atts_L.setText("Determined Attributes");

        Create_GS_BT.setText("Create Genometric Space");
        Create_GS_BT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Create_GS_BTActionPerformed(evt);
            }
        });

        HM_Cell_Dim_L.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        HM_Cell_Dim_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HM_Cell_Dim_L.setText("Cell Dimension ");

        Auto_Cell_Dimension_CB.setSelected(true);
        Auto_Cell_Dimension_CB.setText("Auto Cell Size");
        Auto_Cell_Dimension_CB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Auto_Cell_Dimension_CBActionPerformed(evt);
            }
        });

        HM_Cell_Dim_H_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HM_Cell_Dim_H_L.setText("Height");
        HM_Cell_Dim_H_L.setEnabled(false);

        HM_Cell_Dim_MinH_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        HM_Cell_Dim_MinH_TB.setText("1");
        HM_Cell_Dim_MinH_TB.setEnabled(false);

        HM_Cell_Dim_W_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HM_Cell_Dim_W_L.setText("Width");
        HM_Cell_Dim_W_L.setEnabled(false);

        HM_Cell_Dim_MinW_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        HM_Cell_Dim_MinW_TB.setText("1");
        HM_Cell_Dim_MinW_TB.setEnabled(false);

        Plot_HeatMap_BT.setText("Plot Heatmap");
        Plot_HeatMap_BT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Plot_HeatMap_BTActionPerformed(evt);
            }
        });

        AutoUpdatePlotCB.setSelected(true);
        AutoUpdatePlotCB.setText("Auto Update Plot");
        AutoUpdatePlotCB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AutoUpdatePlotCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Determined_Feat_L1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Determined_Feat_CB, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Determined_Atts_L, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Determined_Atts_CB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(HM_Cell_Dim_L, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Create_GS_BT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Plot_HeatMap_BT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Auto_Cell_Dimension_CB)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(HM_Cell_Dim_MinH_TB, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(HM_Cell_Dim_MinW_TB, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(HM_Cell_Dim_H_L, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(HM_Cell_Dim_W_L, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(AutoUpdatePlotCB))
                        .addGap(0, 21, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Determined_Feat_L1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Determined_Feat_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Determined_Atts_L)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Determined_Atts_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Create_GS_BT)
                .addGap(32, 32, 32)
                .addComponent(HM_Cell_Dim_L)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HM_Cell_Dim_H_L)
                    .addComponent(HM_Cell_Dim_W_L))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HM_Cell_Dim_MinH_TB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HM_Cell_Dim_MinW_TB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Auto_Cell_Dimension_CB))
                .addGap(1, 1, 1)
                .addComponent(AutoUpdatePlotCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Plot_HeatMap_BT)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setMinimumSize(new java.awt.Dimension(525, 45));

        Operations_L1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Operations_L1.setText("Operations");
        Operations_L1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        Operations_CB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Extract", "Sort", "Rewrite", "Discretize", "Clustering" }));
        Operations_CB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Operations_CBActionPerformed(evt);
            }
        });

        Operation_Title_L.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Operation_Title_L.setText("Operation Label");
        Operation_Title_L.setMaximumSize(new java.awt.Dimension(85, 14));
        Operation_Title_L.setMinimumSize(new java.awt.Dimension(85, 14));
        Operation_Title_L.setPreferredSize(new java.awt.Dimension(85, 14));

        Operation_Title_TB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Operation_Title_TB.setText("my operation");

        Apply_Op_BT.setText("Apply Operation");
        Apply_Op_BT.setActionCommand("");
        Apply_Op_BT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Apply_Op_BTActionPerformed(evt);
            }
        });

        Operations_Options_SP.setBorder(null);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Operations_Options_SP))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(Operations_L1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Operations_CB, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(Operation_Title_L, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Operation_Title_TB)))
                        .addGap(0, 20, Short.MAX_VALUE))
                    .addComponent(Apply_Op_BT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(Operations_L1))
                    .addComponent(Operations_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Operation_Title_TB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Operation_Title_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Operations_Options_SP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Apply_Op_BT)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tree_ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Tree_ScrollPane))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(WelcomePageSP, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(WelcomePageSP, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
        );

        spaceIllustrationTab.addTab("     Welcome Page     ", jPanel3);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spaceIllustrationTab)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spaceIllustrationTab)
                .addContainerGap())
        );

        File_JM.setText("  File  ");

        Load_MI.setText("   Load file      ");
        Load_MI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Load_MIActionPerformed(evt);
            }
        });
        File_JM.add(Load_MI);

        Load_Folder_MI.setText("   Load files folder          ");
        Load_Folder_MI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Load_Folder_MIActionPerformed(evt);
            }
        });
        File_JM.add(Load_Folder_MI);
        File_JM.add(jSeparator2);

        SaveSessionMI.setText("   Save session");
        SaveSessionMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SaveSessionMIActionPerformed(evt);
            }
        });
        File_JM.add(SaveSessionMI);

        LoadSessionMI.setText("   Load session");
        LoadSessionMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                LoadSessionMIActionPerformed(evt);
            }
        });
        File_JM.add(LoadSessionMI);
        File_JM.add(jSeparator5);

        jMenuItem2.setText("   Preferences          ");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem2ActionPerformed(evt);
            }
        });
        File_JM.add(jMenuItem2);
        File_JM.add(jSeparator1);

        Exit_MI.setText("   Quit GeMSE");
        Exit_MI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Exit_MIActionPerformed(evt);
            }
        });
        File_JM.add(Exit_MI);

        jMenuBar1.add(File_JM);

        Tools_JM.setText("  Analysis  ");

        SearchPatternMI.setText("     Pattern Analysis     ");
        SearchPatternMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SearchPatternMIActionPerformed(evt);
            }
        });
        Tools_JM.add(SearchPatternMI);

        StatisticalInferenceMI.setText("     Statistical Inference     ");
        StatisticalInferenceMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                StatisticalInferenceMIActionPerformed(evt);
            }
        });
        Tools_JM.add(StatisticalInferenceMI);

        jMenuBar1.add(Tools_JM);

        ViewMenu.setText("  View  ");

        boxWhiskerPlotMI.setText("     Box-and-whisker plot     ");
        boxWhiskerPlotMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                boxWhiskerPlotMIActionPerformed(evt);
            }
        });
        ViewMenu.add(boxWhiskerPlotMI);

        jMenuBar1.add(ViewMenu);

        HelpMenu.setText("  Help  ");

        HOnlineSupport.setLabel("     Online Support     ");
        HOnlineSupport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HOnlineSupportActionPerformed(evt);
            }
        });
        HelpMenu.add(HOnlineSupport);
        HelpMenu.add(jSeparator4);

        HOnlineDocs.setLabel("     Online Docs     ");

        HDInterface.setLabel("     Interface     ");
        HDInterface.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HDInterfaceActionPerformed(evt);
            }
        });
        HOnlineDocs.add(HDInterface);

        HDLoadData.setLabel("     Load Data     ");
        HDLoadData.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HDLoadDataActionPerformed(evt);
            }
        });
        HOnlineDocs.add(HDLoadData);

        HDLoadNSaveSession.setLabel("     Load and Save Session     ");
        HDLoadNSaveSession.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HDLoadNSaveSessionActionPerformed(evt);
            }
        });
        HOnlineDocs.add(HDLoadNSaveSession);

        HDTransitions.setLabel("     Transitions     ");
        HDTransitions.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HDTransitionsActionPerformed(evt);
            }
        });
        HOnlineDocs.add(HDTransitions);

        HelpMenu.add(HOnlineDocs);

        HVideoTutorial.setLabel("     Video Tutorials     ");

        HVOverview.setLabel("     Overview     ");
        HVOverview.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HVOverviewActionPerformed(evt);
            }
        });
        HVideoTutorial.add(HVOverview);

        HVDemo.setLabel("     Demo (using ENCODE data)     ");
        HVDemo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HVDemoActionPerformed(evt);
            }
        });
        HVideoTutorial.add(HVDemo);
        HVideoTutorial.add(jSeparator3);

        HVInterface.setLabel("     Interface     ");
        HVInterface.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HVInterfaceActionPerformed(evt);
            }
        });
        HVideoTutorial.add(HVInterface);

        HVLoad.setLabel("     Load Data     ");
        HVLoad.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HVLoadActionPerformed(evt);
            }
        });
        HVideoTutorial.add(HVLoad);

        HVSave.setLabel("     Save     ");
        HVSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HVSaveActionPerformed(evt);
            }
        });
        HVideoTutorial.add(HVSave);

        HelpMenu.add(HVideoTutorial);

        jMenuBar1.add(HelpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Plot_HeatMap_BTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Plot_HeatMap_BTActionPerformed
    {//GEN-HEADEREND:event_Plot_HeatMap_BTActionPerformed
        UpdatePlot();
    }//GEN-LAST:event_Plot_HeatMap_BTActionPerformed

    private void Load_MIActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Load_MIActionPerformed
    {//GEN-HEADEREND:event_Load_MIActionPerformed
        Loader loader = new Loader(this);
        if (loader.Load(LoadType.File))
        {
            UpdateCachedFeatures();
            EnableDisableSpaceGeneration(true);
            GlobalVariables.sessionSerializationRequired = true;
        }
    }//GEN-LAST:event_Load_MIActionPerformed

    private void Exit_MIActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Exit_MIActionPerformed
    {//GEN-HEADEREND:event_Exit_MIActionPerformed
        System.exit(0);
    }//GEN-LAST:event_Exit_MIActionPerformed

    private void formWindowStateChanged(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowStateChanged
    {//GEN-HEADEREND:event_formWindowStateChanged
        if (GlobalVariables.space != null
            && GlobalVariables.space.space != null
            && GlobalVariables.space.space.content != null
            && GlobalVariables.space.space.content.length > 0)
            UpdatePlot();
    }//GEN-LAST:event_formWindowStateChanged

    private void Create_GS_BTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Create_GS_BTActionPerformed
    {//GEN-HEADEREND:event_Create_GS_BTActionPerformed
        UpdateGenometricSpace();
        CreateStateTransitionTree();
        EnableDisableSpaceManipulation(true);
        GlobalVariables.disablePopups = false;

        GlobalVariables.space.UpdateSpace(GetSelectedNodeID());
        GlobalVariables.space.space.UpdateColumnsTitles();
        GlobalVariables.space.space.UpdateRowsTitles();
        _gridView.Display(GlobalVariables.space.space);
        GlobalVariables.sessionSerializationRequired = true;
    }//GEN-LAST:event_Create_GS_BTActionPerformed

    private void Auto_Cell_Dimension_CBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Auto_Cell_Dimension_CBActionPerformed
    {//GEN-HEADEREND:event_Auto_Cell_Dimension_CBActionPerformed
        if (Auto_Cell_Dimension_CB.isSelected() == true)
        {
            HM_Cell_Dim_H_L.setEnabled(false);
            HM_Cell_Dim_MinH_TB.setEnabled(false);
            HM_Cell_Dim_W_L.setEnabled(false);
            HM_Cell_Dim_MinW_TB.setEnabled(false);
        }
        else
        {
            HM_Cell_Dim_H_L.setEnabled(true);
            HM_Cell_Dim_MinH_TB.setEnabled(true);
            HM_Cell_Dim_W_L.setEnabled(true);
            HM_Cell_Dim_MinW_TB.setEnabled(true);
        }
    }//GEN-LAST:event_Auto_Cell_Dimension_CBActionPerformed

    private void Apply_Op_BTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Apply_Op_BTActionPerformed
    {//GEN-HEADEREND:event_Apply_Op_BTActionPerformed
        String selectedSpaceID = GetSelectedNodeID();

        Functions function = Functions.Extract;
        switch (Operations_CB.getSelectedItem().toString())
        {
            case "Extract":
                function = Functions.Extract;
                break;

            case "Rewrite":
                function = Functions.Rewrite;
                break;

            case "Discretize":
                function = Functions.Discretize;
                break;

            case "Clustering":
                function = Functions.Clustering;
                break;

            case "Sort":
                function = Functions.Sort;
                break;
        }

        GlobalVariables.space.RunOperation(selectedSpaceID, Operation_Title_TB.getText(), function, _operationsOptions.GetValues());
        CreateStateTransitionTree();
        GlobalVariables.sessionSerializationRequired = true;
    }//GEN-LAST:event_Apply_Op_BTActionPerformed

    private void Operations_CBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Operations_CBActionPerformed
    {//GEN-HEADEREND:event_Operations_CBActionPerformed
        LoadSelectedOperationOptions();
    }//GEN-LAST:event_Operations_CBActionPerformed

    private void Load_Folder_MIActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Load_Folder_MIActionPerformed
    {//GEN-HEADEREND:event_Load_Folder_MIActionPerformed
        Loader loader = new Loader(this);
        if (loader.Load(LoadType.Directory))
        {
            UpdateCachedFeatures();
            EnableDisableSpaceGeneration(true);
            GlobalVariables.sessionSerializationRequired = true;
        }
    }//GEN-LAST:event_Load_Folder_MIActionPerformed

    private void SearchPatternMIActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SearchPatternMIActionPerformed
    {//GEN-HEADEREND:event_SearchPatternMIActionPerformed
        PatternSearchWindow psMW = new PatternSearchWindow();
        psMW.source = GlobalVariables.space.GetSpace(GetSelectedNodeID());
        psMW.spaceID = GetSelectedNodeID();
        psMW.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        psMW.setLocationRelativeTo(this);
        psMW.setVisible(true);
    }//GEN-LAST:event_SearchPatternMIActionPerformed

    private void AutoUpdatePlotCBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AutoUpdatePlotCBActionPerformed
    {//GEN-HEADEREND:event_AutoUpdatePlotCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AutoUpdatePlotCBActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem2ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem2ActionPerformed
        HeatmapOptions hmO = new HeatmapOptions();
        //hmO.SetDefaultPlotSize(HeatMapPlot.getSize());
        hmO.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        hmO.setLocationRelativeTo(this);
        hmO.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void SaveSessionMIActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SaveSessionMIActionPerformed
    {//GEN-HEADEREND:event_SaveSessionMIActionPerformed
        SessionIO.Serialize(this, false);
        GlobalVariables.sessionSerializationRequired = false;
    }//GEN-LAST:event_SaveSessionMIActionPerformed

    private void LoadSessionMIActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_LoadSessionMIActionPerformed
    {//GEN-HEADEREND:event_LoadSessionMIActionPerformed
        try
        {
            SessionIO.Deserialize(this);
            UpdateCachedFeatures();
            EnableDisableSpaceGeneration(true);
            CreateStateTransitionTree();
            EnableDisableSpaceManipulation(true);
            GlobalVariables.disablePopups = false;
            GlobalVariables.space.UpdateSpace(GetSelectedNodeID());
            GlobalVariables.space.space.UpdateColumnsTitles();
            GlobalVariables.space.space.UpdateRowsTitles();
            _gridView.Display(GlobalVariables.space.space);
            GlobalVariables.sessionSerializationRequired = false;
        }
        catch (Exception ex)
        {
            EnableDisableSpaceGeneration(false);
        }
    }//GEN-LAST:event_LoadSessionMIActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        if (GlobalVariables.sessionSerializationRequired)
        {
            int r = JOptionPane.showConfirmDialog(
                    this,
                    "Session is not saved. \nDo you want to save the session before you exit ?     ",
                    "Unsaved session",
                    JOptionPane.YES_NO_CANCEL_OPTION);

            switch (r)
            {
                case JOptionPane.YES_OPTION: SessionIO.Serialize(this, true);
                    break;
                case JOptionPane.NO_OPTION: System.exit(0);
                    break;
                default: setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                    break;
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void HOnlineSupportActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HOnlineSupportActionPerformed
    {//GEN-HEADEREND:event_HOnlineSupportActionPerformed
        try
        {
            OpenWebpage.open(new URI("https://github.com/Genometric/GeMSE/issues"));
        }
        catch (URISyntaxException ex)
        {
            Logger.getLogger(GeMSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HOnlineSupportActionPerformed

    private void HDLoadDataActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HDLoadDataActionPerformed
    {//GEN-HEADEREND:event_HDLoadDataActionPerformed
        try
        {
            OpenWebpage.open(new URI("https://github.com/Genometric/GeMSE/wiki/Load-Data"));
        }
        catch (URISyntaxException ex)
        {
            Logger.getLogger(GeMSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HDLoadDataActionPerformed

    private void HDTransitionsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HDTransitionsActionPerformed
    {//GEN-HEADEREND:event_HDTransitionsActionPerformed
        try
        {
            OpenWebpage.open(new URI("https://github.com/Genometric/GeMSE/wiki/Transitions"));
        }
        catch (URISyntaxException ex)
        {
            Logger.getLogger(GeMSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HDTransitionsActionPerformed

    private void HDLoadNSaveSessionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HDLoadNSaveSessionActionPerformed
    {//GEN-HEADEREND:event_HDLoadNSaveSessionActionPerformed
        try
        {
            OpenWebpage.open(new URI("https://github.com/Genometric/GeMSE/wiki/Save-and-load-session"));
        }
        catch (URISyntaxException ex)
        {
            Logger.getLogger(GeMSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HDLoadNSaveSessionActionPerformed

    private void HDInterfaceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HDInterfaceActionPerformed
    {//GEN-HEADEREND:event_HDInterfaceActionPerformed
        try
        {
            OpenWebpage.open(new URI("https://github.com/Genometric/GeMSE/wiki/Interface"));
        }
        catch (URISyntaxException ex)
        {
            Logger.getLogger(GeMSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HDInterfaceActionPerformed

    private void HVInterfaceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HVInterfaceActionPerformed
    {//GEN-HEADEREND:event_HVInterfaceActionPerformed
        try
        {
            OpenWebpage.open(new URI("https://youtu.be/B0hVsd9SE5Q?list=PLfWxoOMC6swJBgu4nIDgsoXO_sLuGnIqF"));
        }
        catch (URISyntaxException ex)
        {
            Logger.getLogger(GeMSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HVInterfaceActionPerformed

    private void HVLoadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HVLoadActionPerformed
    {//GEN-HEADEREND:event_HVLoadActionPerformed
        try
        {
            OpenWebpage.open(new URI("https://youtu.be/h9FbXNukdQY?list=PLfWxoOMC6swJBgu4nIDgsoXO_sLuGnIqF"));
        }
        catch (URISyntaxException ex)
        {
            Logger.getLogger(GeMSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HVLoadActionPerformed

    private void HVOverviewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HVOverviewActionPerformed
    {//GEN-HEADEREND:event_HVOverviewActionPerformed
        try
        {
            OpenWebpage.open(new URI("https://youtu.be/75FCAoSmioA"));
        }
        catch (URISyntaxException ex)
        {
            Logger.getLogger(GeMSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HVOverviewActionPerformed

    private void HVDemoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HVDemoActionPerformed
    {//GEN-HEADEREND:event_HVDemoActionPerformed
        try
        {
            OpenWebpage.open(new URI("https://youtu.be/n2wXoT21o94?list=PLfWxoOMC6swJBgu4nIDgsoXO_sLuGnIqF"));
        }
        catch (URISyntaxException ex)
        {
            Logger.getLogger(GeMSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HVDemoActionPerformed

    private void HVSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HVSaveActionPerformed
    {//GEN-HEADEREND:event_HVSaveActionPerformed
        try
        {
            OpenWebpage.open(new URI("https://youtu.be/Mv0vw2CZuPE?list=PLfWxoOMC6swJBgu4nIDgsoXO_sLuGnIqF"));
        }
        catch (URISyntaxException ex)
        {
            Logger.getLogger(GeMSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HVSaveActionPerformed

    private void StatisticalInferenceMIActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_StatisticalInferenceMIActionPerformed
    {//GEN-HEADEREND:event_StatisticalInferenceMIActionPerformed
        StatisticalInferenceWindow siw = new StatisticalInferenceWindow();
        siw.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        siw.setLocationRelativeTo(this);
        siw.setVisible(true);
    }//GEN-LAST:event_StatisticalInferenceMIActionPerformed

    private void boxWhiskerPlotMIActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_boxWhiskerPlotMIActionPerformed
    {//GEN-HEADEREND:event_boxWhiskerPlotMIActionPerformed
        BoxAndWhiskerPlot boxPlot = new BoxAndWhiskerPlot(GlobalVariables.space.space);
        boxPlot.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        boxPlot.setLocationRelativeTo(this);
        boxPlot.setVisible(true);
    }//GEN-LAST:event_boxWhiskerPlotMIActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(GeMSE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(GeMSE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(GeMSE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(GeMSE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new GeMSE().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Apply_Op_BT;
    private javax.swing.JCheckBox AutoUpdatePlotCB;
    private javax.swing.JCheckBox Auto_Cell_Dimension_CB;
    private javax.swing.JButton Create_GS_BT;
    private javax.swing.JComboBox Determined_Atts_CB;
    private javax.swing.JLabel Determined_Atts_L;
    private javax.swing.JComboBox Determined_Feat_CB;
    private javax.swing.JLabel Determined_Feat_L1;
    private javax.swing.JMenuItem Exit_MI;
    private javax.swing.JMenu File_JM;
    private javax.swing.JMenuItem HDInterface;
    private javax.swing.JMenuItem HDLoadData;
    private javax.swing.JMenuItem HDLoadNSaveSession;
    private javax.swing.JMenuItem HDTransitions;
    private javax.swing.JLabel HM_Cell_Dim_H_L;
    private javax.swing.JLabel HM_Cell_Dim_L;
    private javax.swing.JTextField HM_Cell_Dim_MinH_TB;
    private javax.swing.JTextField HM_Cell_Dim_MinW_TB;
    private javax.swing.JLabel HM_Cell_Dim_W_L;
    private javax.swing.JMenu HOnlineDocs;
    private javax.swing.JMenuItem HOnlineSupport;
    private javax.swing.JMenuItem HVDemo;
    private javax.swing.JMenuItem HVInterface;
    private javax.swing.JMenuItem HVLoad;
    private javax.swing.JMenuItem HVOverview;
    private javax.swing.JMenuItem HVSave;
    private javax.swing.JMenu HVideoTutorial;
    private javax.swing.JPopupMenu HeatmapPopupMenu;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuItem LoadSessionMI;
    private javax.swing.JMenuItem Load_Folder_MI;
    private javax.swing.JMenuItem Load_MI;
    private javax.swing.JLabel Operation_Title_L;
    private javax.swing.JTextField Operation_Title_TB;
    private javax.swing.JComboBox Operations_CB;
    private javax.swing.JLabel Operations_L1;
    private javax.swing.JScrollPane Operations_Options_SP;
    private javax.swing.JButton Plot_HeatMap_BT;
    private javax.swing.JMenuItem SaveSessionMI;
    private javax.swing.JMenuItem SearchPatternMI;
    private javax.swing.JMenuItem StatisticalInferenceMI;
    private javax.swing.JMenu Tools_JM;
    private javax.swing.JScrollPane Tree_ScrollPane;
    private javax.swing.JMenu ViewMenu;
    private javax.swing.JScrollPane WelcomePageSP;
    private javax.swing.JTable _inputSamplesDG;
    private javax.swing.JMenuItem boxWhiskerPlotMI;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JTabbedPane spaceIllustrationTab;
    // End of variables declaration//GEN-END:variables


    private void UpdateCachedFeatures()
    {
        UpdateCachedFeaturesDataGrid();
        UpdateDeterminedFeatures();
        UpdateDeterminedAttributes();
        UpdateColumnsAndRowsLabelOptions();
    }

    private void UpdateColumnsAndRowsLabelOptions()
    {
        ArrayList<String> availableColumnLabels = new ArrayList<>();

        // if the following content is changed, it should be also updated
        // with Get_Columns_Titles. 
        availableColumnLabels.add("Sample Name (file name)");

        for (int i = 0 ; i < GlobalVariables.samples.size() ; i++)
        {
            HashMap<String, String[]> meta_Data = GlobalVariables.samples.get(i).metaData;
            for (String entry : meta_Data.keySet())
                if (availableColumnLabels.contains((String) entry) == false)
                    availableColumnLabels.add((String) entry);
        }

        Collections.sort(
                availableColumnLabels,
                (String o1, String o2) -> o1.toLowerCase().compareTo(o2.toLowerCase()));

        GlobalVariables.availableColumnLabelOptions = availableColumnLabels.toArray(new String[availableColumnLabels.size()]);

        // This is setting the sample's default labeling option.
        // The following line set's the defualt labeling option to sampl'es filename, 
        // and the proceeding line sets it the first available attribute.
        GlobalVariables.selectedColumnLabelOption = "Sample Name (file name)";
        /*if (GlobalVariables.availableColumnLabelOptions.length > 0)
            GlobalVariables.selectedColumnLabelOption = GlobalVariables.availableColumnLabelOptions[0];*/
    }

    private void UpdateCachedFeaturesDataGrid()
    {
        DefaultTableModel tabModel = new DefaultTableModel()
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        };

        tabModel.setColumnIdentifiers(new Object[]
        {
            "Loaded file"
        });

        for (SampleData file : GlobalVariables.samples)
            tabModel.addRow(new Object[]
            {
                file.fileName
            });

        _inputSamplesDG.setModel(tabModel);
        //_inputSamplesDG.getColumnModel().getColumn(0).setPreferredWidth(100);
        //_inputSamplesDG.getColumnModel().getColumn(1).setPreferredWidth(50);
    }

    private void UpdateDeterminedFeatures()
    {
        Determined_Feat_CB.removeAllItems();
        for (String att : GlobalVariables.AllFeatures())
            if (att.equals("CSV") == false)
                Determined_Feat_CB.addItem(att);
    }

    private void UpdateDeterminedAttributes()
    {
        Determined_Atts_CB.removeAllItems();
        for (String att : GlobalVariables.AllNumAttributes())
            Determined_Atts_CB.addItem(att);
    }

    private void UpdateGenometricSpace()
    {
        GlobalVariables.space = new GenometricSpace();

        int ssc = GlobalVariables.samples.size();
        int[] selectedSamples = new int[ssc];
        for (int i = 0 ; i < ssc ; i++)
            selectedSamples[i] = i;

        Set<String> chromosomes = GlobalVariables.samples.get(0).features.keySet();

        int mnr = 0; // maximum number of regions of the selected feature type across all selected samples.
        String selectedFeature = Determined_Feat_CB.getSelectedItem().toString();

        if (selectedFeature.equals("ALL"))
            for (Map.Entry<String, Integer> kvp : GlobalVariables.featuresCount.entrySet())
                mnr += kvp.getValue();
        else
            mnr = GlobalVariables.featuresCount.get(selectedFeature);

        GlobalVariables.space.Initialize(
                selectedSamples,
                chromosomes,
                selectedFeature,
                Determined_Atts_CB.getSelectedItem().toString(),
                mnr);
    }

    private String GetSelectedNodeID()
    {
        if (_tree.getSelectionCount() == 0)
            _tree.setSelectionRow(0);

        Object userObject = ((DefaultMutableTreeNode) _tree.getLastSelectedPathComponent()).getUserObject();

        if (userObject instanceof TreeNodeVector)
            return ((TreeNodeVector) userObject).component.GetSpaceID();
        else if (userObject instanceof NodeData)
            return ((NodeData) userObject).GetSpaceID();
        else
            return "null";
    }

    public void CreateStateTransitionTree()
    {
        A2MConverter converter = new A2MConverter();

        DefaultMutableTreeNode previouslySelectedNode = null;

        if (_tree != null)
            previouslySelectedNode = (DefaultMutableTreeNode) _tree.getLastSelectedPathComponent();

        DefaultMutableTreeNode newTree = converter.GetNodes(GlobalVariables.space.GetTree());

        _tree.setModel(new DefaultTreeModel(newTree));
        _tree.setOpaque(false);
        _tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        _tree.setRootVisible(true);
        TreeCellRenderer renderer = new StateSpaceTreeRenderer();
        _tree.setCellRenderer(renderer);

        Tree_ScrollPane.setViewportView(_tree);

        if (previouslySelectedNode != null)
        {
            TreePath newPath = converter.GetPath((NodeData) previouslySelectedNode.getUserObject(), newTree);
            _tree.expandPath(newPath);
            _tree.setSelectionPath(newPath);
            _tree.scrollPathToVisible(_tree.getSelectionPath());
            _tree.setScrollsOnExpand(true);
            _tree.setExpandsSelectedPaths(true);
        }
    }

    private void TreeSelectionChanged(TreeSelectionEvent e)
    {
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) _tree.getLastSelectedPathComponent();

        if (selectedNode != null)// && selection_tree_first_pass)
        {
            EnableDisableTransformation(true);
            GlobalVariables.selectedNodeID = GetSelectedNodeID();
            // This will empty the dendrogram info so that for nodes that 
            // are not clustering, no dendrogram would be generated.
            GlobalVariables.HeatmapOptions.heatmapParameters = null;

            NodeData nodeData = (NodeData) selectedNode.getUserObject();
            _selectedNodeOperationParameters = null;
            _selectedNodeOperationParameters = nodeData.GetOperationParameters();

            Operations_CB.setSelectedItem(nodeData.GetOperation().toString());
            Operation_Title_TB.setText(nodeData.GetUserDefinedTitle());

            int currentTabIndex = spaceIllustrationTab.getSelectedIndex();

            if (spaceIllustrationTab.getTabCount() == 3
                && spaceIllustrationTab.getTitleAt(2).equals("   Dendrogram   "))
            {
                spaceIllustrationTab.remove(2);
                _dendrogramPanel = null;
            }

            switch (nodeData.GetOperation())
            {
                case Root:
                    Operations_Options_SP.setViewportView(null);
                    if (currentTabIndex == 2)
                        spaceIllustrationTab.setSelectedIndex(0);
                    break;

                case Clustering:
                    if (GlobalVariables.HeatmapOptions.heatmpaType == true)
                    {
                        GlobalVariables.HeatmapOptions.heatmapParameters
                        = (ClusteringOptions) nodeData.GetOperationParameters();
                    }
                    else
                    {
                        GlobalVariables.HeatmapOptions.heatmapParameters = null;
                        _dendrogramPanel = new OVDendrogramPanel(
                                nodeData.GetSpaceID(),
                                nodeData.GetOperation(),
                                (ClusteringOptions) nodeData.GetOperationParameters());

                        spaceIllustrationTab.addTab("   Dendrogram   ", _dendrogramPanel);

                        if (currentTabIndex == 2)
                            spaceIllustrationTab.setSelectedIndex(2);
                    }
                    break;

                default:
                    if (currentTabIndex == 2)
                        spaceIllustrationTab.setSelectedIndex(0);
                    break;
            }

            if (AutoUpdatePlotCB.isSelected())
                UpdatePlot();
        }
        else
        {
            EnableDisableTransformation(false);
        }
    }

    private void LoadSelectedOperationOptions()
    {
        switch (Operations_CB.getSelectedItem().toString())
        {
            case "Extract":
                if (_selectedNodeOperationParameters instanceof SelectOptions)
                    Operations_Options_SP.setViewportView(_operationsOptions.GetPanel(
                            Functions.Extract, _selectedNodeOperationParameters));
                else
                    Operations_Options_SP.setViewportView(_operationsOptions.GetPanel(
                            Functions.Extract, new SelectOptions(
                                    0, GlobalVariables.space.space.colsID.length,
                                    0, GlobalVariables.space.space.rowsID.length)));
                break;

            case "Rewrite":
                if (_selectedNodeOperationParameters instanceof DiscretizeOptions)
                    Operations_Options_SP.setViewportView(_operationsOptions.GetPanel(
                            Functions.Rewrite, _selectedNodeOperationParameters));
                else
                    Operations_Options_SP.setViewportView(_operationsOptions.GetPanel(
                            Functions.Rewrite, new DiscretizeOptions(
                                    GlobalVariables.space.space.GetMinValue(),
                                    GlobalVariables.space.space.GetMaxValue(),
                                    0, GlobalVariables.space.space.colsID.length,
                                    0, GlobalVariables.space.space.rowsID.length)));

                break;

            case "Discretize":
                if (_selectedNodeOperationParameters instanceof DiscretizeOptions)
                    Operations_Options_SP.setViewportView(_operationsOptions.GetPanel(
                            Functions.Discretize, _selectedNodeOperationParameters));
                else
                    Operations_Options_SP.setViewportView(_operationsOptions.GetPanel(
                            Functions.Discretize, new DiscretizeOptions(
                                    GlobalVariables.space.space.GetMinValue(),
                                    GlobalVariables.space.space.GetMaxValue(),
                                    0, GlobalVariables.space.space.colsID.length,
                                    0, GlobalVariables.space.space.rowsID.length)));
                break;

            case "Clustering":
                if (_selectedNodeOperationParameters instanceof ClusteringOptions)
                    Operations_Options_SP.setViewportView(_operationsOptions.GetPanel(
                            Functions.Clustering, _selectedNodeOperationParameters));
                else
                    Operations_Options_SP.setViewportView(_operationsOptions.GetPanel(
                            Functions.Clustering, new ClusteringOptions()));
                break;

            case "Sort":
                if (_selectedNodeOperationParameters instanceof SortOptions)
                    Operations_Options_SP.setViewportView(_operationsOptions.GetPanel(
                            Functions.Sort, _selectedNodeOperationParameters));
                else
                    Operations_Options_SP.setViewportView(_operationsOptions.GetPanel(
                            Functions.Sort, new SortOptions(
                                    GlobalVariables.space.space.colsID.length,
                                    GlobalVariables.space.space.rowsID.length)));
                break;
        }
    }

    private void EnableDisableSpaceGeneration(Boolean enable)
    {
        Determined_Atts_CB.setEnabled(enable);
        Determined_Atts_L.setEnabled(enable);
        Determined_Feat_CB.setEnabled(enable);
        Determined_Feat_L1.setEnabled(enable);
        Create_GS_BT.setEnabled(enable);
    }

    private void EnableDisableSpaceManipulation(Boolean enable)
    {
        HM_Cell_Dim_L.setEnabled(enable);
        Auto_Cell_Dimension_CB.setEnabled(enable);
        AutoUpdatePlotCB.setEnabled(enable);
        Plot_HeatMap_BT.setEnabled(enable);
        //spaceIllustrationTab.setEnabled(enable);
        SearchPatternMI.setEnabled(enable);
        StatisticalInferenceMI.setEnabled(enable);
        boxWhiskerPlotMI.setEnabled(enable);

        if (enable)
        {
            spaceIllustrationTab.removeAll();
            _heatmapView = new HeatmapView();
            spaceIllustrationTab.addTab("   Heatmap   ", _heatmapView);
            _gridView = new GridView();
            spaceIllustrationTab.addTab("   Grid View   ", _gridView);
        }
        else
        {
            spaceIllustrationTab.removeAll();
            //spaceIllustrationTab.add("   Welcome   ", new WelcomeView());
        }
    }

    private void EnableDisableTransformation(Boolean enable)
    {
        Apply_Op_BT.setEnabled(enable);
        Operations_CB.setEnabled(enable);
        Operation_Title_TB.setEnabled(enable);
        Operations_L1.setEnabled(enable);
        Operation_Title_L.setEnabled(enable);
    }

    public void ResizeColumnWidth(JTable table)
    {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0 ; column < table.getColumnCount() ; column++)
        {
            int width = 50; // Min width

            TableColumn tableColumn = columnModel.getColumn(column);
            TableCellRenderer renderer = tableColumn.getHeaderRenderer();
            if (renderer == null)
                renderer = table.getTableHeader().getDefaultRenderer();

            Component component
                      = renderer.getTableCellRendererComponent(
                            table,
                            tableColumn.getHeaderValue(), false, false, -1, column);
            width = Math.max(component.getPreferredSize().width + 5, width);

            for (int row = 0 ; row < table.getRowCount() ; row++)
            {
                renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 5, width);
            }
            if (width > 400)
                width = 400;
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    public void UpdatePlot()
    {
        GlobalVariables.space.UpdateSpace(GetSelectedNodeID());
        GlobalVariables.space.space.UpdateColumnsTitles();
        GlobalVariables.space.space.UpdateRowsTitles();

        Dimension dimension
                  = new Dimension(
                        Integer.parseInt(HM_Cell_Dim_MinW_TB.getText()),
                        Integer.parseInt(HM_Cell_Dim_MinH_TB.getText()));
        Dimension calDimension
                  = _heatmapView.Plot(
                        GlobalVariables.space.space,
                        spaceIllustrationTab.getSize(),
                        Auto_Cell_Dimension_CB.isSelected(),
                        dimension);

        HM_Cell_Dim_MinH_TB.setText(String.valueOf(calDimension.height));
        HM_Cell_Dim_MinW_TB.setText(String.valueOf(calDimension.width));
    }
}
