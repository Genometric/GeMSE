/** GenoMetric Space Explorer (GeMSE) Copyright (C) 2017 Vahid Jalili
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */
package GeMSE.OperationsPanels;

import GeMSE.GlobalVariables;
import GeMSE.OperationsOptions.SortOptions;
import GeMSE.OperationsOptions.SortOptions.Orders;
import GeMSE.GS.SampleData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vahid Jalili
 */
public class SortOptionsPanel extends javax.swing.JPanel
{

    /**
     * Creates new form Select_Options
     */
    public SortOptionsPanel()
    {
        initComponents();

        ((JLabel) SortDomains_CB.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel) Order_CB.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel) SortMetadata_CB.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
    }

    private List<String> _criterias = new ArrayList<>();
    private int _colCount;
    private int _rowCount;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        Order_L = new javax.swing.JLabel();
        Sorting_Area_L = new javax.swing.JLabel();
        SortDomains_CB = new javax.swing.JComboBox();
        Order_CB = new javax.swing.JComboBox();
        ColOrRowDomain_L = new javax.swing.JLabel();
        domainFromTB = new javax.swing.JTextField();
        SortingMetadata_L = new javax.swing.JLabel();
        SortMetadata_CB = new javax.swing.JComboBox();
        AddMetadataPredicate = new javax.swing.JButton();
        AddContentPredicate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Defined_Predicates = new javax.swing.JTable();
        AddRangeL = new javax.swing.JLabel();
        AddRangeToL = new javax.swing.JLabel();
        domainToTB = new javax.swing.JTextField();

        setMaximumSize(new java.awt.Dimension(258, 32767));
        setMinimumSize(new java.awt.Dimension(258, 510));
        setPreferredSize(new java.awt.Dimension(258, 520));
        setLayout(new java.awt.BorderLayout());

        Order_L.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Order_L.setText("Order");
        Order_L.setMaximumSize(new java.awt.Dimension(60, 20));
        Order_L.setMinimumSize(new java.awt.Dimension(60, 20));
        Order_L.setPreferredSize(new java.awt.Dimension(60, 20));

        Sorting_Area_L.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Sorting_Area_L.setText("Sorting Area");
        Sorting_Area_L.setMaximumSize(new java.awt.Dimension(60, 20));
        Sorting_Area_L.setMinimumSize(new java.awt.Dimension(60, 20));
        Sorting_Area_L.setPreferredSize(new java.awt.Dimension(60, 20));

        SortDomains_CB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Columns Metadata", "Rows Metadata", "Columns Contents", "Rows Contents" }));
        SortDomains_CB.setMaximumSize(new java.awt.Dimension(169, 27));
        SortDomains_CB.setMinimumSize(new java.awt.Dimension(169, 27));
        SortDomains_CB.setPreferredSize(new java.awt.Dimension(169, 27));
        SortDomains_CB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SortDomains_CBActionPerformed(evt);
            }
        });

        Order_CB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ascending Order", "Descending Order" }));
        Order_CB.setMaximumSize(new java.awt.Dimension(169, 27));

        ColOrRowDomain_L.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ColOrRowDomain_L.setText("Sorting domain");
        ColOrRowDomain_L.setMaximumSize(new java.awt.Dimension(60, 20));
        ColOrRowDomain_L.setMinimumSize(new java.awt.Dimension(60, 20));
        ColOrRowDomain_L.setPreferredSize(new java.awt.Dimension(60, 20));

        domainFromTB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        domainFromTB.setText("0");
        domainFromTB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                domainFromTBActionPerformed(evt);
            }
        });

        SortingMetadata_L.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        SortingMetadata_L.setText("Metadata");
        SortingMetadata_L.setMaximumSize(new java.awt.Dimension(60, 20));
        SortingMetadata_L.setMinimumSize(new java.awt.Dimension(60, 20));
        SortingMetadata_L.setPreferredSize(new java.awt.Dimension(60, 20));

        SortMetadata_CB.setMaximumSize(new java.awt.Dimension(169, 27));
        SortMetadata_CB.setMinimumSize(new java.awt.Dimension(169, 27));
        SortMetadata_CB.setPreferredSize(new java.awt.Dimension(169, 27));
        SortMetadata_CB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SortMetadata_CBActionPerformed(evt);
            }
        });

        AddMetadataPredicate.setText("Add");
        AddMetadataPredicate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AddMetadataPredicateActionPerformed(evt);
            }
        });

        AddContentPredicate.setText("Add");
        AddContentPredicate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AddContentPredicateActionPerformed(evt);
            }
        });

        Defined_Predicates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Order", "Criteria"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Defined_Predicates);

        AddRangeL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AddRangeL.setText("Range from");
        AddRangeL.setMaximumSize(new java.awt.Dimension(60, 20));
        AddRangeL.setMinimumSize(new java.awt.Dimension(60, 20));
        AddRangeL.setPreferredSize(new java.awt.Dimension(60, 20));

        AddRangeToL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AddRangeToL.setText("to");
        AddRangeToL.setMaximumSize(new java.awt.Dimension(60, 20));
        AddRangeToL.setMinimumSize(new java.awt.Dimension(60, 20));
        AddRangeToL.setPreferredSize(new java.awt.Dimension(60, 20));

        domainToTB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        domainToTB.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AddMetadataPredicate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(SortingMetadata_L, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                                        .addComponent(Order_L, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Sorting_Area_L, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(Order_CB, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(SortDomains_CB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(SortMetadata_CB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(ColOrRowDomain_L, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(AddRangeL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(0, 0, Short.MAX_VALUE)
                                                    .addComponent(AddRangeToL, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(domainFromTB, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                                .addComponent(domainToTB))))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(AddContentPredicate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(11, 11, 11))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Order_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Order_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Sorting_Area_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SortDomains_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SortingMetadata_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SortMetadata_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AddMetadataPredicate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ColOrRowDomain_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddRangeL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(domainFromTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(domainToTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddRangeToL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddContentPredicate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void SortDomains_CBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SortDomains_CBActionPerformed
    {//GEN-HEADEREND:event_SortDomains_CBActionPerformed
        _criterias.clear();

        switch ((String) SortDomains_CB.getSelectedItem())
        {
            case "Columns Contents":
                ColOrRowDomain_L.setText("Sorting domain: Column#");
                ColOrRowDomain_L.setEnabled(true);
                domainFromTB.setEnabled(true);
                domainToTB.setEnabled(true);
                AddRangeL.setEnabled(true);
                AddRangeToL.setEnabled(true);
                SortingMetadata_L.setEnabled(false);
                SortMetadata_CB.setEnabled(false);
                AddMetadataPredicate.setEnabled(false);
                AddContentPredicate.setEnabled(true);
                break;

            case "Rows Contents":
                ColOrRowDomain_L.setText("Sorting domain: Row#");
                ColOrRowDomain_L.setEnabled(true);
                domainFromTB.setEnabled(true);
                domainToTB.setEnabled(true);
                AddRangeL.setEnabled(true);
                AddRangeToL.setEnabled(true);
                SortingMetadata_L.setEnabled(false);
                SortMetadata_CB.setEnabled(false);
                AddMetadataPredicate.setEnabled(false);
                AddContentPredicate.setEnabled(true);
                break;

            case "Columns Metadata":
                ColOrRowDomain_L.setText("Sorting domain:");
                ColOrRowDomain_L.setEnabled(false);
                domainFromTB.setEnabled(false);
                domainToTB.setEnabled(false);
                AddRangeL.setEnabled(false);
                AddRangeToL.setEnabled(false);
                SortingMetadata_L.setEnabled(true);
                SortMetadata_CB.setEnabled(true);
                SortMetadata_CB.removeAllItems();
                AddMetadataPredicate.setEnabled(true);
                AddContentPredicate.setEnabled(false);

                if (GlobalVariables.availableColumnLabelOptions != null)
                {
                    for (String cL : GlobalVariables.availableColumnLabelOptions)
                    {
                        SortMetadata_CB.addItem(cL);
                    }
                }
                break;

            case "Rows Metadata":
                ColOrRowDomain_L.setText("Sorting domain:");
                ColOrRowDomain_L.setEnabled(false);
                domainFromTB.setEnabled(false);
                domainToTB.setEnabled(false);
                AddRangeL.setEnabled(false);
                AddRangeToL.setEnabled(false);
                //domainFromTB.setText(String.valueOf(_sortDomain));
                AddContentPredicate.setEnabled(false);
                SortMetadata_CB.removeAllItems();
                AddMetadataPredicate.setEnabled(true);

                if (null != GlobalVariables.rowLabelsSource)
                    switch (GlobalVariables.rowLabelsSource)
                    {
                        case ID:
                            SortingMetadata_L.setEnabled(false);
                            SortMetadata_CB.setEnabled(false);
                            SortMetadata_CB.addItem("ID (chr - start - stop)");
                            break;
                        case SampleAttributes:
                            SortingMetadata_L.setEnabled(true);
                            SortMetadata_CB.setEnabled(true);
                            for (SampleData sample : GlobalVariables.samples)
                                if (sample.fileName.equals(GlobalVariables.rowLabelsSourceSelectedSample))
                                    for (String attribute : sample.GetTXTAttributesArray())
                                        SortMetadata_CB.addItem(attribute);
                            break;
                        case ReferenceAttributes:
                            SortingMetadata_L.setEnabled(true);
                            SortMetadata_CB.setEnabled(true);
                            for (String attribute : GlobalVariables.annotations.GetTXTAttributesArray())
                                SortMetadata_CB.addItem(attribute);
                            break;
                    }
                break;

            default:
                ColOrRowDomain_L.setEnabled(false);
                domainFromTB.setEnabled(false);
                SortingMetadata_L.setEnabled(false);
                SortMetadata_CB.setEnabled(false);
                AddMetadataPredicate.setEnabled(false);
                AddContentPredicate.setEnabled(false);
                break;
        }

        UpdateDefinedCriteriasDG();
    }//GEN-LAST:event_SortDomains_CBActionPerformed

    private void SortMetadata_CBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SortMetadata_CBActionPerformed
    {//GEN-HEADEREND:event_SortMetadata_CBActionPerformed

    }//GEN-LAST:event_SortMetadata_CBActionPerformed

    private void AddMetadataPredicateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AddMetadataPredicateActionPerformed
    {//GEN-HEADEREND:event_AddMetadataPredicateActionPerformed
        _criterias.add((String) SortMetadata_CB.getSelectedItem());
        UpdateDefinedCriteriasDG();
    }//GEN-LAST:event_AddMetadataPredicateActionPerformed

    private void AddContentPredicateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AddContentPredicateActionPerformed
    {//GEN-HEADEREND:event_AddContentPredicateActionPerformed
        int maxValue = 0;
        switch ((String) SortDomains_CB.getSelectedItem())
        {
            case "Columns Contents":
                maxValue = _colCount;
                break;

            case "Rows Contents":
                maxValue = _rowCount;
                break;
        }

        for (int i = Integer.valueOf(domainFromTB.getText()) ; i <= Integer.valueOf(domainToTB.getText()) ; i++)
            if (i < maxValue)
                _criterias.add(String.valueOf(i));
        UpdateDefinedCriteriasDG();
    }//GEN-LAST:event_AddContentPredicateActionPerformed

    private void domainFromTBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_domainFromTBActionPerformed
    {//GEN-HEADEREND:event_domainFromTBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_domainFromTBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddContentPredicate;
    private javax.swing.JButton AddMetadataPredicate;
    private javax.swing.JLabel AddRangeL;
    private javax.swing.JLabel AddRangeToL;
    private javax.swing.JLabel ColOrRowDomain_L;
    private javax.swing.JTable Defined_Predicates;
    private javax.swing.JComboBox Order_CB;
    private javax.swing.JLabel Order_L;
    private javax.swing.JComboBox SortDomains_CB;
    private javax.swing.JComboBox SortMetadata_CB;
    private javax.swing.JLabel SortingMetadata_L;
    private javax.swing.JLabel Sorting_Area_L;
    private javax.swing.JTextField domainFromTB;
    private javax.swing.JTextField domainToTB;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public SortOptions GetValues()
    {
        SortOptions options = new SortOptions(_colCount, _rowCount);

        switch ((String) Order_CB.getSelectedItem())
        {
            case "Ascending Order":
                options.order = Orders.Ascending;
                break;

            case "Descending Order":
                options.order = Orders.Descending;
                break;
        }

        switch ((String) SortDomains_CB.getSelectedItem())
        {
            case "Columns Contents":
                options.domain = SortOptions.Domains.ColumnsContent;
                break;

            case "Columns Metadata":
                options.domain = SortOptions.Domains.ColumnsMetadata;
                break;

            case "Rows Contents":
                options.domain = SortOptions.Domains.RowsContent;
                break;

            case "Rows Metadata":
                options.domain = SortOptions.Domains.RowsMetadata;
                break;
        }

        options.criteria = _criterias.toArray(new String[_criterias.size()]);
        return options;
    }

    public void SetValues(SortOptions values)
    {
        if (values != null)
        {
            _criterias.clear();
            switch (values.order)
            {
                case Ascending:
                    Order_CB.setSelectedItem("Ascending Order");
                    break;

                case Descending:
                    Order_CB.setSelectedItem("Descending Order");
                    break;
            }

            switch (values.domain)
            {
                case ColumnsContent:
                    SortDomains_CB.setSelectedItem("Columns Contents");
                    break;

                case ColumnsMetadata:
                    SortDomains_CB.setSelectedItem("Columns Metadata");
                    break;

                case RowsContent:
                    SortDomains_CB.setSelectedItem("Rows Contents");
                    break;

                case RowsMetadata:
                    SortDomains_CB.setSelectedItem("Rows Metadata");
                    break;
            }

            if (values.criteria == null)
                _criterias = new ArrayList<>();
            else
                _criterias = new ArrayList<>(Arrays.asList((String[]) values.criteria));

            _rowCount = values.GetRowCount();
            _colCount = values.GetColCount();
        }
        else
        {
            Order_CB.setSelectedIndex(0);
            if (SortDomains_CB.getItemCount() > 0)
            {
                SortDomains_CB.setSelectedIndex(0);
            }
            _criterias.clear();
            //_sortDomain = 0;
        }

        UpdateDefinedCriteriasDG();
    }

    private void UpdateDefinedCriteriasDG()
    {
        DefaultTableModel DefinedCriteriasTabMod = new DefaultTableModel()
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        };

        DefinedCriteriasTabMod.setColumnIdentifiers(new String[]
        {
            "Order", "Criteria"
        });

        for (int i = 0 ; i < _criterias.size() ; i++)
        {
            DefinedCriteriasTabMod.addRow(new String[]
            {
                String.valueOf(i),
                _criterias.get(i)
            });
        }

        this.Defined_Predicates.setModel(DefinedCriteriasTabMod);
    }
}
